[{"path":"https://r-cf.github.io/CFtime/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022-2025 CFtime authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"climate-change-models-and-calendars","dir":"Articles","previous_headings":"","what":"Climate change models and calendars","title":"Working with CFtime","text":"Around world, many climate change models developed (100+) umbrella World Climate Research Programme assess rate climate change. Published data generally publicly available download research (non-commercial) purposes partner organizations Earth Systems Grid Federation. data formatted comply CF Metadata Conventions, set standards support standardization among research groups published data sets. conventions greatly facilitate use analysis climate projections standard processing work flows () work across various data sets. flip side, CF Metadata Conventions needs cater wide range modeling requirements means areas covered standards complex might assumed. One areas temporal dimension data sets. CF Metadata Conventions supports less 12 different calendar definitions, , upon analysis, fall 9 distinct calendars (perspective computation climate projections): standard (gregorian): Gregorian calendar common use many countries around world, adopted edict Pope Gregory XIII 1582 effect 15 October year. earliest valid time calendar 0001-01-01 00:00:00 (1 January year 1) year 0 exist CF Metadata Conventions require year positive, noting Julian calendar used periods Gregorian calendar introduced. proleptic_gregorian: Gregorian calendar validity extended periods prior 1582-10-15, including year 0 negative years. calendar closest used OSes used R. difference leap seconds: calendar account (neither POSIXt), computers periodically synchronized time server running UTC, include leap seconds. tai: International Atomic Time, global standard linear time: counts seconds since start 1958-01-01 00:00:00. presentation uses Gregorian calendar. Timestamps prior start allowed. utc: Coordinated Universal Time, standard civil timekeeping world. based International Atomic Time uses occasional leap seconds remain synchronous Earth’s rotation around Sun; end 2024 37 seconds behind tai. uses Gregorian calendar start 1972-01-01 00:00:00; earlier timestamps allowed. Future timestamps also allowed insertion leap seconds unpredictable. computer clocks synchronize UTC calculate time intervals without accounting leap seconds. julian: Adopted year 45 BCE, every fourth year leap year. Originally, Julian calendar monotonically increasing year assigned indeed several Julian calendars use around world today different years assigned . Common interpretation currently year Gregorian calendar. Julian calendar currently 13 days behind Gregorian calendar. standard calendar, earliest valid time calendar 0001-01-01 00:00:00. 365_day noleap: “Model time” years leap day. Negative years allowed year 0 exists. 366_day all_leap: “Model time” years leap day. Negative years allowed year 0 exists. 360_day: “Model time” every year 12 months 30 days . Negative years allowed year 0 exists. none: Perpetual “calendar” experiments simulated given instant year. elements calendar thus represent instant time. three calendars model time specific CF Metadata Conventions reduce computational complexities working dates. None nine calendars compliant standard POSIXt date/time facilities R using standard date/time functions quickly lead problems. See section “CFtime POSIXt”, , detailed description discrepancies CF calendars POSIXt. code snippet, date 1949-12-01 origin dates calculated. adding 43,289 days origin data set uses 360_day calendar, yield date 120 years origin: Using standard POSIXt calculations gives result 21 months correct date - obviously undesirable situation. example far artificial: 1949-12-01 origin CORDEX data, covering period 1950 - 2005 historical experiments period 2006 - 2100 RCP experiments (deviation data sets), several models used CORDEX set use 360_day calendar. 365_day noleap calendar deviates 1 day every 4 years (disregarding centurial years), 24 days century. 366_day all_leap calendar deviates 3 days every 4 years, 76 days century. CFtime package deals complexity different calendars allowed CF Metadata Conventions. properly formats dates times (even oddball dates like 2070-02-30) can generate calendar-aware factors processing data.","code":"# POSIXt calculations on a standard calendar - INCORRECT as.Date(\"1949-12-01\") + 43289 #> [1] \"2068-06-08\"  # CFtime calculation on a \"360_day\" calendar - CORRECT # See below examples for details on the two functions as_timestamp(CFtime(\"days since 1949-12-01\", \"360_day\", 43289)) #> [1] \"2070-02-30\""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"time-zones","dir":"Articles","previous_headings":"Climate change models and calendars","what":"Time zones","title":"Working with CFtime","text":"character CF time series - number numerical offsets base date - implies single time zone associated time series, standard proleptic_gregorian calendars. calendars time zone can set effect. Daylight savings time information never considered CFtime user take care avoid entering times DST; DST accounted indicating applicable DST time zone. time zone offset UTC stored CFTime instance can retrieved timezone() function. vector character timestamps time zone information parsed parse_timestamps() function time zones found different CFTime time zone, warning message generated timestamp interpreted CFTime time zone. correction timestamp CFTime time zone performed. concept time zones apply utc tai calendars represent universal time, .e. indicated time valid globe. Timestamps passed calendars time zone indicated, , anything 0 offset generate error.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"using-cftime-to-deal-with-calendars","dir":"Articles","previous_headings":"","what":"Using CFtime to deal with calendars","title":"Working with CFtime","text":"Data sets compliant CF Metadata Conventions always include origin, specific point time reference specified calendar, points time calculated adding specified offset certain unit. approach encapsulated CFtime package R6 class CFTime. CFtime() function takes description (actually unit - “days” - reference origin - “1949-12-01”), calendar description, vector offsets origin. CFTime instance created origin calendar changed anymore. Offsets may added. practice, parameters taken data set interest. CF Metadata Conventions require data sets netCDF format, metadata describing data set included single file, including mandatory “Conventions” global attribute string identifying version CF Metadata Conventions file adheres (among possible others). surprisingly, pieces interest contained “time” coordinate variables file. process becomes follows, CMIP6 file daily precipitation. vignette using ncdfCF package provides easiest interface work netCDF files. Package CFtime integrated ncdfCF makes working time dimensions netCDF seamless. Packages RNetCDF ncdf4 can work CFtime well “intelligence” built ncdfCF available, automatically identifying axes data orientation. packages like terra stars recommended provide access specifics time dimension data consider calendars “proleptic_gregorian”. can see global attribute “Conventions” file adheres CF Metadata Conventions, among others. According CF conventions, units calendar required attributes “time” dimension netCDF file. example (others vignette) use ncdfCF package. using RNetCDF ncdf4 package, checking CF conventions creating CFTime instance goes like : character representations time series can easily generated: …well range time series: Note latter case, timestamps time series time 00:00:00 time extremes time series also displayed. common occurrence CF Metadata Conventions prescribe middle time period (month, day, etc) recorded, months 31 days something like 2005-01-15T12:00:00.","code":"# Create a CFTime object from a definition string, a calendar and some offsets (t <- CFtime(\"days since 1949-12-01\", \"360_day\", 19830:90029)) #> CF calendar: #>   Origin  : 1949-12-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2005-01-01 .. 2199-12-30] (average of 1.000000 days between 70200 elements) #>   Bounds  : not set # install.packages(\"ncdfCF\") library(ncdfCF)  # Opening a data file that is included with the package. # Usually you would `list.files()` on a directory of your choice. fn <- list.files(path = system.file(\"extdata\", package = \"CFtime\"), full.names = TRUE)[1] (ds <- ncdfCF::open_ncdf(fn)) #> <Dataset> pr_day_GFDL-ESM4_ssp245_r1i1p1f1_gr1_20150101-20991231_v20180701  #> Resource   : /home/runner/work/_temp/Library/CFtime/extdata/pr_day_GFDL-ESM4_ssp245_r1i1p1f1_gr1_20150101-20991231_v20180701.nc  #> Format     : netcdf4  #> Collection : CMIP6  #> Conventions: CF-1.7 CMIP-6.0 UGRID-1.0  #> Has groups : FALSE  #>  #> Variable: #>  name long_name     units      data_type axes           #>  pr   Precipitation kg m-2 s-1 NC_FLOAT  lon, lat, time #>  #> External variable: areacella #>  #> Attributes: #>  name                  type      length #>  external_variables    NC_CHAR     9    #>  history               NC_CHAR   124    #>  table_id              NC_CHAR     3    #>  activity_id           NC_CHAR    11    #>  branch_method         NC_CHAR     8    #>  branch_time_in_child  NC_DOUBLE   1    #>  branch_time_in_parent NC_DOUBLE   1    #>  comment               NC_CHAR    10    #>  contact               NC_CHAR    32    #>  Conventions           NC_CHAR    25    #>  creation_date         NC_CHAR    20    #>  data_specs_version    NC_CHAR     8    #>  experiment            NC_CHAR    30    #>  experiment_id         NC_CHAR     6    #>  forcing_index         NC_INT      1    #>  frequency             NC_CHAR     3    #>  further_info_url      NC_CHAR    77    #>  grid                  NC_CHAR    94    #>  grid_label            NC_CHAR     3    #>  initialization_index  NC_INT      1    #>  institution           NC_CHAR   112    #>  institution_id        NC_CHAR     9    #>  license               NC_CHAR   805    #>  mip_era               NC_CHAR     5    #>  nominal_resolution    NC_CHAR     6    #>  parent_activity_id    NC_CHAR     4    #>  parent_experiment_id  NC_CHAR    10    #>  parent_mip_era        NC_CHAR     5    #>  parent_source_id      NC_CHAR     9    #>  parent_time_units     NC_CHAR    19    #>  parent_variant_label  NC_CHAR     8    #>  physics_index         NC_INT      1    #>  product               NC_CHAR    12    #>  realization_index     NC_INT      1    #>  realm                 NC_CHAR     5    #>  source                NC_CHAR   560    #>  source_id             NC_CHAR     9    #>  source_type           NC_CHAR    18    #>  sub_experiment        NC_CHAR     4    #>  sub_experiment_id     NC_CHAR     4    #>  title                 NC_CHAR    82    #>  tracking_id           NC_CHAR    49    #>  variable_id           NC_CHAR     2    #>  variant_info          NC_CHAR     3    #>  references            NC_CHAR    30    #>  variant_label         NC_CHAR     8    #>  value                                               #>  areacella                                           #>  File was processed by fremetar (GFDL analog of ...  #>  day                                                 #>  ScenarioMIP                                         #>  standard                                            #>  60225                                               #>  60225                                               #>  <null ref>                                          #>  gfdl.climate.model.info@noaa.gov                    #>  CF-1.7 CMIP-6.0 UGRID-1.0                           #>  2019-06-18T05:29:00Z                                #>  01.00.27                                            #>  update of RCP4.5 based on SSP2                      #>  ssp245                                              #>  1                                                   #>  day                                                 #>  https://furtherinfo.es-doc.org/CMIP6.NOAA-GFDL....  #>  atmos data regridded from Cubed-sphere (c96) to...  #>  gr1                                                 #>  1                                                   #>  National Oceanic and Atmospheric Administration...  #>  NOAA-GFDL                                           #>  CMIP6 model data produced by NOAA-GFDL is licen...  #>  CMIP6                                               #>  100 km                                              #>  CMIP                                                #>  historical                                          #>  CMIP6                                               #>  GFDL-ESM4                                           #>  days since 1850-1-1                                 #>  r1i1p1f1                                            #>  1                                                   #>  model-output                                        #>  1                                                   #>  atmos                                               #>  GFDL-ESM4 (2018):\\natmos: GFDL-AM4.1 (Cubed-sphe... #>  GFDL-ESM4                                           #>  AOGCM AER CHEM BGC                                  #>  none                                                #>  none                                                #>  NOAA GFDL GFDL-ESM4 model output prepared for C...  #>  hdl:21.14100/48767401-8960-4864-8738-e64640bef71d   #>  pr                                                  #>  N/A                                                 #>  see further_info_url attribute                      #>  r1i1p1f1  # \"Conventions\" global attribute must have a string like \"CF-1.*\" for this package to work reliably  # Look at the \"time\" axis (time <- ds[[\"time\"]]) #> <Time axis> [6] time #> Length     : 31025 #> Axis       : T  #> Calendar   : noleap  #> Range      : 2015-01-01T12:00:00 ... 2099-12-31T12:00:00 (days)  #> Bounds     : 2015-01-01 ... 2100-01-01  #>  #> Attributes: #>  name          type      length value                 #>  long_name     NC_CHAR    4     time                  #>  axis          NC_CHAR    1     T                     #>  calendar_type NC_CHAR    6     noleap                #>  bounds        NC_CHAR    9     time_bnds             #>  standard_name NC_CHAR    4     time                  #>  description   NC_CHAR   13     Temporal mean         #>  units         NC_CHAR   21     days since 1850-01-01 #>  calendar      NC_CHAR    6     noleap                #>  actual_range  NC_DOUBLE  2     60225.5, 91249.5  # Get the CFTime instance from the \"time\" axis (t <- time$time) #> CF calendar: #>   Origin  : 1850-01-01T00:00:00 #>   Units   : days #>   Type    : noleap #> Time series: #>   Elements: [2015-01-01T12:00:00 .. 2099-12-31T12:00:00] (average of 1.000000 days between 31025 elements) #>   Bounds  : set library(RNetCDF) nc <- open.nc(fn) att.get.nc(nc, -1, \"Conventions\") t <- CFtime(att.get.nc(nc, \"time\", \"units\"),              att.get.nc(nc, \"time\", \"calendar\"),              var.get.nc(nc, \"time\"))  library(ncdf4) nc <- nc_open(fn) nc_att_get(nc, 0, \"Conventions\") t <- CFtime(nc$dim$time$units,              nc$dim$time$calendar,              nc$dim$time$vals) dates <- t$as_timestamp(format = \"date\") dates[1:10] #>  [1] \"2015-01-01\" \"2015-01-02\" \"2015-01-03\" \"2015-01-04\" \"2015-01-05\" #>  [6] \"2015-01-06\" \"2015-01-07\" \"2015-01-08\" \"2015-01-09\" \"2015-01-10\" t$range() #> [1] \"2015-01-01T12:00:00\" \"2099-12-31T12:00:00\""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"supporting-processing-of-climate-projection-data","dir":"Articles","previous_headings":"","what":"Supporting processing of climate projection data","title":"Working with CFtime","text":"working high resolution climate projection data, typically “day” resolution, one processing steps aggregate data lower resolution dekad (10-day period), month meteorological season, compute derivative value dekadal sum precipitation, monthly minimum/maximum daily temperature, seasonal average daily short-wave irradiance. also possible create factors multiple “eras” one go. greatly reduces programming effort want calculate anomalies multiple future periods. complete example provided vignette “Processing climate projection data”. easy generate factors need CFTime instance prepared: “era” version, two interesting things note : eras coincide boundaries time series. example , time series starts 2015, baseline era 1991. Obviously, number time steps time series fall within era reduced. factor always length time series, NA values time series values falling era. ensures factor compatible data set time series describes, functions like tapply() throw error. six periods defined factoring: year, summarize data yearly timescales season, meteorological seasons. Note month December added months January February following year, date “2020-12-01” yields factor value “2021S1”. quarter, standard quarters year. month, monthly summaries, default period. dekad, 10-day period. month subdivided dekads follows: (1) days 01 - 10; (2) days 11 - 20; (3) remainder month. day, summarize sub-daily data.","code":"# Create a dekad factor for the whole `t` time series that was created above f_k <- t$factor(\"dekad\") str(f_k) #>  Factor w/ 3060 levels \"2015D01\",\"2015D02\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \"era\")= int -1 #>  - attr(*, \"period\")= chr \"dekad\" #>  - attr(*, \"CFTime\")=CFTime with origin [days since 1850-01-01] using calendar [noleap] having 3060 offset values  # Create monthly factors for a baseline era and early, mid and late 21st century eras baseline <- t$factor(era = 1991:2020) future <- t$factor(era = list(early = 2021:2040, mid = 2041:2060, late = 2061:2080)) str(future) #> List of 3 #>  $ early: Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values $ mid  : Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values $ late : Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values"},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"new-time-dimension","dir":"Articles","previous_headings":"Supporting processing of climate projection data","what":"New “time” dimension","title":"Working with CFtime","text":"CFTime instance describes “time” dimension associated data set. process dimension data set using CFTime$factor() another method filter otherwise subset “time” dimension, resulting data set different “time” dimension. associate proper CFTime instance processing result, methods package return CFTime instance attribute: vignette “Processing climate projection data” fully worked example .","code":"(new_time <- attr(f_k, \"CFTime\")) #> CF calendar: #>   Origin  : 1850-01-01T00:00:00 #>   Units   : days #>   Type    : noleap #> Time series: #>   Elements: [2015-01-06T00:00:00 .. 2099-12-26T12:00:00] (average of 10.138771 days between 3060 elements) #>   Bounds  : set"},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"incomplete-time-series","dir":"Articles","previous_headings":"Supporting processing of climate projection data","what":"Incomplete time series","title":"Working with CFtime","text":"can test time series complete function is_complete(). time series considered complete time steps two extreme values equally spaced. “fuzzy” assessment completeness time series datum unit “days” smaller time steps months years apart - different lengths days different months years (e.g. leap year). time series incomplete, instance missing time steps, recognize processing. example, might want filter months fewer 90% daily data processing apply weights based actual coverage. time series complete coverage baseline era 20%! Recall time series starts 2015 baseline period factor 1991:2020 ’s 6 years time series data 30 years baseline factor. artificial example missing data: Keep mind, though, data sets time unit lower intended resolution data. Since CF conventions recommend coarsest time unit “day”, many files monthly data sets definition like days since 2016-01-01 offset values middle month like 15, 44, 74, 104, .... Even scenarios can verify data set complete function CFcomplete().","code":"# Is the time series complete? is_complete(t) #> [1] TRUE  # How many time units fit in a factor level? t$factor_units(baseline) #>  [1] 31 28 31 30 31 30 31 31 30 31 30 31  # What's the absolute and relative coverage of our time series t$factor_coverage(baseline, \"absolute\") #>  [1] 186 168 186 180 186 180 186 186 180 186 180 186 t$factor_coverage(baseline, \"relative\") #>  [1] 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 0.2 # 4 years of data on a `365_day` calendar, keep 80% of values n <- 365 * 4 cov <- 0.8 offsets <- sample(0:(n-1), n * cov)  (t <- CFtime(\"days since 2020-01-01\", \"365_day\", offsets)) #> Warning: Offsets not monotonically increasing. #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 365_day #> Time series: #>   Elements: [2020-01-04 .. 2023-12-31] (average of 1.247644 days between 1168 elements) #>   Bounds  : not set # Note that there are about 1.25 days between observations  mon <- t$factor(\"month\") t$factor_coverage(mon, \"absolute\") #>  [1] 26 24 26 26 23 24 24 22 23 22 24 26 24 21 21 25 25 26 21 26 26 26 22 23 23 #> [26] 23 25 22 24 25 23 28 25 25 24 22 21 22 26 29 23 26 26 27 23 26 27 27 t$factor_coverage(mon, \"relative\") #>  [1] 0.8387097 0.8571429 0.8387097 0.8666667 0.7419355 0.8000000 0.7741935 #>  [8] 0.7096774 0.7666667 0.7096774 0.8000000 0.8387097 0.7741935 0.7500000 #> [15] 0.6774194 0.8333333 0.8064516 0.8666667 0.6774194 0.8387097 0.8666667 #> [22] 0.8387097 0.7333333 0.7419355 0.7419355 0.8214286 0.8064516 0.7333333 #> [29] 0.7741935 0.8333333 0.7419355 0.9032258 0.8333333 0.8064516 0.8000000 #> [36] 0.7096774 0.6774194 0.7857143 0.8387097 0.9666667 0.7419355 0.8666667 #> [43] 0.8387097 0.8709677 0.7666667 0.8387097 0.9000000 0.8709677"},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"cftime-and-posixt","dir":"Articles","previous_headings":"","what":"CFtime and POSIXt","title":"Working with CFtime","text":"CF Metadata Conventions supports 11 different calendars (disregarding none ). None fully compatible POSIXt, basis timekeeping virtually computers. reason POSIXt consider leap seconds (just like tai calendar) computer clocks periodically synchronized using Network Time Protocol servers report UTC time. problem easily demonstrated: difftime() 27 seconds, number leap seconds UTC since introduction 1972. computer may correct time based UTC, calculations periods include leap seconds always number seconds.","code":"# 1972-01-01 is the origin of UTC, when leap seconds came into existence difftime(as.POSIXct(\"2024-01-01\"), as.POSIXct(\"1972-01-01\"), units = \"sec\") #> Time difference of 1640995200 secs  # CFtime with a \"utc\" calendar t <- CFTime$new(\"seconds since 1972-01-01\", \"utc\", \"2024-01-01\") t$offsets #> [1] 1640995227  # Leap seconds in UTC .leap.seconds #>  [1] \"1972-07-01 GMT\" \"1973-01-01 GMT\" \"1974-01-01 GMT\" \"1975-01-01 GMT\" #>  [5] \"1976-01-01 GMT\" \"1977-01-01 GMT\" \"1978-01-01 GMT\" \"1979-01-01 GMT\" #>  [9] \"1980-01-01 GMT\" \"1981-07-01 GMT\" \"1982-07-01 GMT\" \"1983-07-01 GMT\" #> [13] \"1985-07-01 GMT\" \"1988-01-01 GMT\" \"1990-01-01 GMT\" \"1991-01-01 GMT\" #> [17] \"1992-07-01 GMT\" \"1993-07-01 GMT\" \"1994-07-01 GMT\" \"1996-01-01 GMT\" #> [21] \"1997-07-01 GMT\" \"1999-01-01 GMT\" \"2006-01-01 GMT\" \"2009-01-01 GMT\" #> [25] \"2012-07-01 GMT\" \"2015-07-01 GMT\" \"2017-01-01 GMT\""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"duh","dir":"Articles","previous_headings":"CFtime and POSIXt","what":"Duh!","title":"Working with CFtime","text":"27 seconds concern application - perhaps data daily resolution - can safely forget leap seconds several calendars, particular standard (periods 1582-10-15), proleptic_gregorian tai. utc calendar account leap seconds consider use - calendar considers leap seconds calculation. calendars support generation timestamps POSIXct as_timestamp() function note potential discrepancy due presence leap seconds.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"when-seconds-count","dir":"Articles","previous_headings":"CFtime and POSIXt","what":"When seconds count","title":"Working with CFtime","text":"second accuracy concern, carefully consider time keeping source data use matching calendar. utc calendar sensible option equipment synchronizes time NTP server computer . Even ensure time accurate first new observation new leap second introduced.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"bigger-problems","dir":"Articles","previous_headings":"CFtime and POSIXt","what":"Bigger problems","title":"Working with CFtime","text":"calendars discrepancies POSIXt much larger, namely one days. calendars support POSIXct timestamps error thrown try. really want timestamps POSIXct can generate timestamps character strings using package, convert POSIXct Date using available R tools. Converting time series using incompatible calendars POSIXct Date likely produce problems. pronounced 360_day calendar: 31 January missing vector Dates 360_day calendar include 29 30 February NAs POSIXt rejects . produce problems later processing data. general advice therefore: convert CFTime objects Date objects unless sure CFTime object uses POSIXt-compatible calendar. degree incompatibility various calendars follows: standard: valid periods 1582-10-15. preceeding period uses Julian calendar. julian: Every fouth year leap year. Dates like 2100-02-29 2200-02-29 valid. 365_day noleap: leap year exists. 2020-02-29 occur. 366_day all_leap: years leap years. 360_day: months 30 days every year. means 31 January, March, May, July, August, October December never occur, 29 30 February occur every year.","code":"# Days in January and February t <- CFtime(\"days since 2023-01-01\", \"360_day\", 0:59) ts_days <- t$as_timestamp(\"date\") as.Date(ts_days) #>  [1] \"2023-01-01\" \"2023-01-02\" \"2023-01-03\" \"2023-01-04\" \"2023-01-05\" #>  [6] \"2023-01-06\" \"2023-01-07\" \"2023-01-08\" \"2023-01-09\" \"2023-01-10\" #> [11] \"2023-01-11\" \"2023-01-12\" \"2023-01-13\" \"2023-01-14\" \"2023-01-15\" #> [16] \"2023-01-16\" \"2023-01-17\" \"2023-01-18\" \"2023-01-19\" \"2023-01-20\" #> [21] \"2023-01-21\" \"2023-01-22\" \"2023-01-23\" \"2023-01-24\" \"2023-01-25\" #> [26] \"2023-01-26\" \"2023-01-27\" \"2023-01-28\" \"2023-01-29\" \"2023-01-30\" #> [31] \"2023-02-01\" \"2023-02-02\" \"2023-02-03\" \"2023-02-04\" \"2023-02-05\" #> [36] \"2023-02-06\" \"2023-02-07\" \"2023-02-08\" \"2023-02-09\" \"2023-02-10\" #> [41] \"2023-02-11\" \"2023-02-12\" \"2023-02-13\" \"2023-02-14\" \"2023-02-15\" #> [46] \"2023-02-16\" \"2023-02-17\" \"2023-02-18\" \"2023-02-19\" \"2023-02-20\" #> [51] \"2023-02-21\" \"2023-02-22\" \"2023-02-23\" \"2023-02-24\" \"2023-02-25\" #> [56] \"2023-02-26\" \"2023-02-27\" \"2023-02-28\" NA           NA"},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"so-how-do-i-compare-climate-projection-data-with-different-calendars","dir":"Articles","previous_headings":"CFtime and POSIXt","what":"So how do I compare climate projection data with different calendars?","title":"Working with CFtime","text":"One reason convert time dimension different climate projection data sets able compare data different models produce multi-model ensemble. correct procedure first calculate data set individually property interest (e.g. average daily rainfall per month anomaly future period relative baseline period), typically involve aggregation lower resolution (daily data monthly averages), combine aggregate data multiple data sets compute statistically interesting properties (average among models standard deviation, etc). data aggregated daily higher-resolution values lower temporal resolution - “month” - different calendars longer matter (although need convert averaged data (e.g. average daily precipitation month) absolute data (e.g. precipitation per month) use CFfactor_units() make sure use correct scaling factor). Otherwise, really shouldn’t reason convert time series data files Dates. Climate projection data virtually never compared day--day basis different models neither complex date arithmetic make much sense (adding intervals) - CFtime can support basic arithmetic manipulation offsets CFTime object. character representations produced perfectly fine use dimnames() array rownames() data.frame also support basic logical operations \"2023-02-30\" < \"2023-03-01\". ask , really need Dates working unprocessed climate projection data? (, open issue GitHub). complete example creating multi-model ensemble provided vignette “Processing climate projection data”.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/cftime.html","id":"final-observations","dir":"Articles","previous_headings":"","what":"Final observations","title":"Working with CFtime","text":"package intended facilitate processing climate projection data. near-complete implementation CF Metadata Conventions “time” component. parsing deparsing offsets timestamps, data rounded 3 digits precision unit calendar. using description time different calendar unit, may lead loss precision due rounding errors. instance, milli-second precision required, use unit “seconds”. authors knowledge published climate projection data requires milli-second precision intended use package issue marginal.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"time-coordinate","dir":"Articles","previous_headings":"","what":"4.4. Time Coordinate","title":"Conformance with the CF Metadata Conventions","text":"CFTime object constructed information contained units calendar attributes time coordinate read netCDF file. package actually access netCDF file, uses information read file e.g. ncdfCF. Consequently, CFtime package can also construct CFTime object suitable character strings. package agnostic orientation axes data variable references time coordinate. Consequently, standard_name axis attributes considered package (ncdfCF package handles ). Identification time coordinate done units attribute, alone.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"time-coordinate-units","dir":"Articles","previous_headings":"","what":"4.4.1. Time Coordinate Units","title":"Conformance with the CF Metadata Conventions","text":"CFtime package fully supports units \"second\", \"minute\", \"hour\" \"day\", including abbreviated /plural forms. Unit \"second\" (nominally) SI second, \"minute\" equals 60 seconds, \"hour\" equals 3,600 seconds, \"day\" equals 86,400 seconds. exactly expected, refer utc calendar, , peculiarities calendar. units \"month\" \"year\" accepted input using definition UDUNITS. Instead, \"year\" calendar year, either 360, 365 366 days depending value calendar. \"month\" similarly calendar month. Use either time units discouraged CF Metadata Conventions. UDUNITS time units supported package. variants glue word \"since\" accepted, \"\", \"\", \"ref\" \"per\". “reference datetime string” formatted using UDUNITS broken timestamp format following ISO8601 rules, noting datetimes valid specific calendars Gregorian (2023-02-30 360_day calendar) acceptable well. UDUNITS “packed” format supported. Timezone information can use 00, 15, 30 45 indicate minutes; minute offsets never used anywhere. time zone value \"UTC\" \"GMT\" accepted, extension conventions. Even though conventions don’t indicate , tai utc calendars can carry time zone indication exist either calendars.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"calendar","dir":"Articles","previous_headings":"","what":"4.4.2. Calendar","title":"Conformance with the CF Metadata Conventions","text":"calendar attribute given, \"standard\" assumed, default calendar per conventions. standard (deprecated gregorian): Fully conformant, leap seconds never considered (see ). combination reference datetime datetimes spanning gap 1582-10-05 1582-10-15, either direction, supported. proleptic_gregorian: Fully conformant, leap seconds never considered (see ). julian: Fully conformant, , despite suggestion conventions, leap seconds exist calendar thus never considered. utc: Fully conformant origin 1972-01-01T00:00:00 (earlier datetimes allowed). Leap seconds always accounted leap second included, UTC time progresses like 23:59:58 ... 23:59:59 ... 23:59:60 ... 00:00:00 ... 00:00:01. also extends minutes 23:59:00 ... 23:59:60 ... 00:00:59 ... 00:01:59, always adding 60 seconds. Likewise hours days. Units \"year\" \"month\" allowed, neither time zone indication. tai: Fully conformant. Units \"year\" \"month\" allowed, neither time zone indication. no_leap / 365_day: Fully conformant. all_leap / 366_day: Fully conformant. 360_day: Fully conformant. none: Fully conformant.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"leap-seconds","dir":"Articles","previous_headings":"","what":"4.4.3. Leap seconds","title":"Conformance with the CF Metadata Conventions","text":"utc calendar fully supports leap seconds. julian calendar concept leap seconds never possible considered. Using leap second julian calendar error. standard proleptic_gregorian calendars variant without leap seconds considered. units_metadata attribute considered, assumed \"leap seconds: unknown\". assumption second accuracy data producer essential, entire tool chain observation equipment, processing, file recording known characteristics regards UTC time leap seconds thus utc calendar used, rather standard proleptic_gregorian caveat communicated units_metdata attribute.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"time-coordinates-with-no-annual-cycle","dir":"Articles","previous_headings":"","what":"4.4.4. Time Coordinates with no Annual Cycle","title":"Conformance with the CF Metadata Conventions","text":"Fully conformant.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"explicitly-defined-calendar","dir":"Articles","previous_headings":"","what":"4.4.5. Explicitly Defined Calendar","title":"Conformance with the CF Metadata Conventions","text":"implemented.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/conformance.html","id":"climatological-statistics","dir":"Articles","previous_headings":"","what":"7.4. Climatological statistics","title":"Conformance with the CF Metadata Conventions","text":"time coordinate climatological bounds fully supported, exception using year 0 standard julian calendars flag climatological data (deprecated practice per CF Metadata Conventions). package agnostic underlying statistical operation produced climatological time cell_methods attribute inspected interpreted.","code":""},{"path":"https://r-cf.github.io/CFtime/articles/processing.html","id":"processing-climate-projection-data","dir":"Articles","previous_headings":"","what":"Processing climate projection data","title":"Processing climate projection data","text":"Individual files containing climate projections contain global, regional local data, typically rectangular latitude-longitude grid, single parameter “near-surface temperature”, number time steps. analysis workflow consists number steps: Download appropriate data files desired combination model, experiment, realization, geography, time range, parameter, … (called “data suite” henceforth). analysis involves multiple parameters (temperature precipitation estimate crop productivity), repeat process parameters. want make multi-model ensemble reduce model bias, repeat desired model, experiment realization combinations (“ensemble member”). end one data suites work . Take files data suite extract data. Process data data suite. Since data (mostly) 3-dimensional arrays, involve binding arrays right dimension something like apply(data, 1:2, tapply, f, fun) (following CF Metadata Conventions, dimensions 1 2 “longitude” “latitude”, respectively; third dimension “time”; none standardized though deviations ; package ncdfCF can help CFVariable$array() method). Repeat data suite ensemble member. Combine results workflow requires. Frequently involves computing “anomalies”: ratio data one future periods baseline period. Repeat ensemble member. Construct multi-model ensemble individual ensemble members. Apart first step obtaining data, steps lend well automation. catch, however, factor f use tapply(). different models (ensemble) use different calendars, meaning different factors required. CFtime package can help . CFTime$factor() method produces factor respects calendar data files. method comes two operating modes: Plain vanilla mode produces factor time period across entire time series. factor level includes year. useful calculate mean temperature every month every year, instance. one “eras” (periods interest) provided, factor level longer includes year can used calculate, instance, mean temperature per period interest era (e.g. average March temperature era 2041-2060). Building examples opening file, creating CFTime instance suitable factor one data suite, daily rainfall, actual processing data precipitation anomalies 3 periods relative baseline period look like :  Looks like Hadley needing rubber boots spring autumn back home! interesting feature, working opening netCDF file plotting, specifics CF calendar data suite uses considered anywhere processing workflow: CFtime package provides functionality. Data suites using another CF calendar processed exactly .","code":"# Setting up library(ncdfCF) fn <- list.files(path = system.file(\"extdata\", package = \"CFtime\"), full.names = TRUE)[1] (ds <- ncdfCF::open_ncdf(fn)) #> <Dataset> pr_day_GFDL-ESM4_ssp245_r1i1p1f1_gr1_20150101-20991231_v20180701  #> Resource   : /home/runner/work/_temp/Library/CFtime/extdata/pr_day_GFDL-ESM4_ssp245_r1i1p1f1_gr1_20150101-20991231_v20180701.nc  #> Format     : netcdf4  #> Collection : CMIP6  #> Conventions: CF-1.7 CMIP-6.0 UGRID-1.0  #> Has groups : FALSE  #>  #> Variable: #>  name long_name     units      data_type axes           #>  pr   Precipitation kg m-2 s-1 NC_FLOAT  lon, lat, time #>  #> External variable: areacella #>  #> Attributes: #>  name                  type      length #>  external_variables    NC_CHAR     9    #>  history               NC_CHAR   124    #>  table_id              NC_CHAR     3    #>  activity_id           NC_CHAR    11    #>  branch_method         NC_CHAR     8    #>  branch_time_in_child  NC_DOUBLE   1    #>  branch_time_in_parent NC_DOUBLE   1    #>  comment               NC_CHAR    10    #>  contact               NC_CHAR    32    #>  Conventions           NC_CHAR    25    #>  creation_date         NC_CHAR    20    #>  data_specs_version    NC_CHAR     8    #>  experiment            NC_CHAR    30    #>  experiment_id         NC_CHAR     6    #>  forcing_index         NC_INT      1    #>  frequency             NC_CHAR     3    #>  further_info_url      NC_CHAR    77    #>  grid                  NC_CHAR    94    #>  grid_label            NC_CHAR     3    #>  initialization_index  NC_INT      1    #>  institution           NC_CHAR   112    #>  institution_id        NC_CHAR     9    #>  license               NC_CHAR   805    #>  mip_era               NC_CHAR     5    #>  nominal_resolution    NC_CHAR     6    #>  parent_activity_id    NC_CHAR     4    #>  parent_experiment_id  NC_CHAR    10    #>  parent_mip_era        NC_CHAR     5    #>  parent_source_id      NC_CHAR     9    #>  parent_time_units     NC_CHAR    19    #>  parent_variant_label  NC_CHAR     8    #>  physics_index         NC_INT      1    #>  product               NC_CHAR    12    #>  realization_index     NC_INT      1    #>  realm                 NC_CHAR     5    #>  source                NC_CHAR   560    #>  source_id             NC_CHAR     9    #>  source_type           NC_CHAR    18    #>  sub_experiment        NC_CHAR     4    #>  sub_experiment_id     NC_CHAR     4    #>  title                 NC_CHAR    82    #>  tracking_id           NC_CHAR    49    #>  variable_id           NC_CHAR     2    #>  variant_info          NC_CHAR     3    #>  references            NC_CHAR    30    #>  variant_label         NC_CHAR     8    #>  value                                               #>  areacella                                           #>  File was processed by fremetar (GFDL analog of ...  #>  day                                                 #>  ScenarioMIP                                         #>  standard                                            #>  60225                                               #>  60225                                               #>  <null ref>                                          #>  gfdl.climate.model.info@noaa.gov                    #>  CF-1.7 CMIP-6.0 UGRID-1.0                           #>  2019-06-18T05:29:00Z                                #>  01.00.27                                            #>  update of RCP4.5 based on SSP2                      #>  ssp245                                              #>  1                                                   #>  day                                                 #>  https://furtherinfo.es-doc.org/CMIP6.NOAA-GFDL....  #>  atmos data regridded from Cubed-sphere (c96) to...  #>  gr1                                                 #>  1                                                   #>  National Oceanic and Atmospheric Administration...  #>  NOAA-GFDL                                           #>  CMIP6 model data produced by NOAA-GFDL is licen...  #>  CMIP6                                               #>  100 km                                              #>  CMIP                                                #>  historical                                          #>  CMIP6                                               #>  GFDL-ESM4                                           #>  days since 1850-1-1                                 #>  r1i1p1f1                                            #>  1                                                   #>  model-output                                        #>  1                                                   #>  atmos                                               #>  GFDL-ESM4 (2018):\\natmos: GFDL-AM4.1 (Cubed-sphe... #>  GFDL-ESM4                                           #>  AOGCM AER CHEM BGC                                  #>  none                                                #>  none                                                #>  NOAA GFDL GFDL-ESM4 model output prepared for C...  #>  hdl:21.14100/48767401-8960-4864-8738-e64640bef71d   #>  pr                                                  #>  N/A                                                 #>  see further_info_url attribute                      #>  r1i1p1f1  # The T axis, with name \"time\" has a CFTime instance t <- ds[[\"time\"]]$time  # Create monthly factors for a baseline era and early, mid and late 21st century eras baseline <- t$factor(era = 1991:2020) future <- t$factor(era = list(early = 2021:2040, mid = 2041:2060, late = 2061:2080)) str(baseline) #>  Factor w/ 12 levels \"01\",\"02\",\"03\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  - attr(*, \"era\")= int 30 #>  - attr(*, \"period\")= chr \"month\" #>  - attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values str(future) #> List of 3 #>  $ early: Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values $ mid  : Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values $ late : Factor w/ 12 levels \"01\",\"02\",\"03\",..: NA NA NA NA NA NA NA NA NA NA ... #>   ..- attr(*, \"era\")= int 20 #>   ..- attr(*, \"period\")= chr \"month\" #>   ..- attr(*, \"CFTime\")=CFClimatology with origin [days since 1850-01-01] using calendar [noleap] having 12 offset values # Get the data for the \"pr\" data variable from the netCDF data set. # The `CFVariable$array()` method ensures that data are in standard R orientation. # Converts units of kg m-2 s-1 to mm/day. pr <- ds[[\"pr\"]]$array() * 86400  # Get a global attribute from the file experiment <- ds$attribute(\"experiment_id\")  # Calculate the daily average precipitation per month for the baseline period # and the three future eras. pr_base <- apply(pr, 1:2, tapply, baseline, mean)                         # an array pr_future <- lapply(future, function(f) apply(pr, 1:2, tapply, f, mean))  # a list of arrays  # Calculate the precipitation anomalies for the future eras against the baseline. # Working with daily averages per month so we can simply subtract and then multiply by days  # per month for each of the factor levels using the CF calendar. ano <- mapply(function(pr, f) {(pr - pr_base) * t$factor_units(f)}, pr_future, future, SIMPLIFY = FALSE)  # Plot the results plot(1:12, ano$early[,1,1], type = \"o\", col = \"blue\", ylim = c(-50, 40), xlim = c(1, 12),       main = paste0(\"Hamilton, New Zealand\\nExperiment: \", experiment),       xlab = \"month\", ylab = \"Precipitation anomaly (mm)\") lines(1:12, ano$mid[,1,1], type = \"o\", col = \"green\") lines(1:12, ano$late[,1,1], type = \"o\", col = \"red\")"},{"path":"https://r-cf.github.io/CFtime/articles/processing.html","id":"combining-data-from-different-models-with-different-calendars","dir":"Articles","previous_headings":"","what":"Combining data from different models with different calendars","title":"Processing climate projection data","text":"Different climate projection data sets can use different calendars. absolutely essential respect calendar different data sets underlying solar atmospheric physics based calendars well. typical situation, researcher construct multi-model ensemble remove reduce bias given model. data sets composing ensemble might well use different calendars. correct way constructing ensemble perform desired analysis every ensemble member individually combine final step perform ensemble operations computing confidence intervals. design CFtime package makes easy , heavy use lists. Building previous example, let’s make multi-model ensemble 2 models (much ensemble limitations including data packages - example easily extends larger set ensemble members). simply compute average monthly precipitation anomaly ensemble members. typical scenario, use values individual models apply suitable analysis, calculating confidence interval model agreement. One significant advantage processing workflow easily parallelized: bulk work goes computing anomalies, ano, embarrassingly parallel read data produce independent outputs. Use package future something similar easily make code run available CPU cores.","code":"# Get the list of files that make up the ensemble members, here: # GFDL ESM4 and MRI ESM2 models for experiment SSP2-4.5, precipitation, CMIP6 2015-01-01 to 2099-12-31 lf <- list.files(path = system.file(\"extdata\", package = \"CFtime\"), full.names = TRUE)  # Loop over the files individually # ano is here a list with each element holding the results for a single model ano <- lapply(lf, function(fn) {   ds <- ncdfCF::open_ncdf(fn)   t <- ds[[\"time\"]]$time   pr <- ds[[\"pr\"]]$array() * 86400    baseline <- t$factor(era = 1991:2020)   pr_base <- apply(pr, 1:2, tapply, baseline, mean)   future <- t$factor(era = list(early = 2021:2040, mid = 2041:2060, late = 2061:2080))   pr_future <- lapply(future, function(f) apply(pr, 1:2, tapply, f, mean))   mapply(function(pr, f) {(pr - pr_base) * t$factor_units(f)}, pr_future, future, SIMPLIFY = FALSE) })  # Era names eras <- c(\"early\", \"mid\", \"late\") dim(eras) <- 3  # Build the ensemble for each era # For each era, grab the data for each of the ensemble members, simplify to an array # and take the mean per row (months, in this case) ensemble <- apply(eras, 1, function(e) {   rowMeans(sapply(ano, function(a) a[[e]], simplify = TRUE))}) colnames(ensemble) <- eras rownames(ensemble) <- rownames(ano[[1]][[1]]) ensemble #>         early         mid        late #> 01 -22.901333 -15.2675652  -1.6380748 #> 02 -25.430060 -21.4016013 -15.3427744 #> 03 -21.895792 -14.7434749 -22.4187823 #> 04   6.763958   6.9498244  15.2008249 #> 05  -2.635598 -15.3054439 -17.0106058 #> 06 -43.152012 -47.3442148 -32.1797467 #> 07   1.072942  10.4940924   3.9473240 #> 08   4.124084  -6.0917940 -12.9178847 #> 09   9.231852  -0.2038321   2.7198366 #> 10   5.148302  10.3044202  12.0060866 #> 11  16.186108  25.9156463   8.2168498 #> 12  -3.211510  -0.2036319   0.7604947"},{"path":"https://r-cf.github.io/CFtime/articles/processing.html","id":"working-with-multiple-files-in-a-single-data-suite","dir":"Articles","previous_headings":"","what":"Working with multiple files in a single data suite","title":"Processing climate projection data","text":"Due large size typical climate projection data files, common data suite contained multiple files. case point CORDEX data set breaks experiment period 2006 - 2100 19 files 5 years , file covering single parameter (temperature, precipitation, etc) entire domain (Europe, South Asia, Central America Caribbean, etc). CFtime package can streamline processing multi-file data suites well. Assuming CORDEX files directory disk, organized domain properties variable, GCM/RCM combination, experiment, etc, process preparing files processing encoded function . argument fn list file names process, var variable contained files. (checks argument sanity , really included. function makes sense single [domain, GCM/RCM, experiment, variable] combination. Also aware data size, CORDEX files huge stitching domain data together easily exhaust available memory may thus lead large swap files poor performance - use ncdfCF::CFVariable$subset() method read spatial temporal chunks data avoid problems.) Calling function like prepare_CORDEX(list.files(path = \"~/CC/CORDEX/CAM\", pattern = \"^pr.*\\\\.nc$\", full.names = TRUE), \"pr\", ncdfCF::aoi(0, 20, 30, 50)) yield list netCDF files precipitation data, resulting CFTime instance describing full temporal extent covered data files, well data bound temporal dimension, ready processing. working like imperative offsets data arrays added final structures exactly order. necessary offsets (data) order, correspondence offsets data needs maintained. (list.files() produces list alphabetical order default, climate projection files produces offsets chronological order.)","code":"library(ncdfCF) library(abind)  prepare_CORDEX <- function(fn, var, aoi) {   data <- vector(\"list\", length(fn))   for (i in 1:length(fn)) {     ds <- ncdfCF::open_ncdf(fn[i])     if (i == 1) {       # Get a CFTime instance from the first file       t <- ds[[\"time\"]]$time     } else {       # Add offsets from the file and add to the CFTime instance       t <- t + ds[[\"time\"]]$time$offsets     }          # Put the subsetted data array in the list     data[[i]] <- ds[[var]]$subset(aoi = aoi)$array()   }      # Create a list for output with the CFTime instance and   # the data bound in a single 3-dimensional array   list(CFTime = t, data = abind(data, along = 3)) }"},{"path":"https://r-cf.github.io/CFtime/articles/processing.html","id":"acknowledgements","dir":"Articles","previous_headings":"","what":"Acknowledgements","title":"Processing climate projection data","text":"results presented contain modified data Copernicus Climate Change Service information, 2023-2025. Neither European Commission ECMWF responsible use may made Copernicus information data contains. acknowledge World Climate Research Programme, , Working Group Coupled Modelling, coordinated promoted CMIP6. thank climate modeling groups producing making available model output, Earth System Grid Federation (ESGF) archiving data providing access, multiple funding agencies support CMIP6 ESGF. two data sets used examples vignette carry following license statements: pr_day_GFDL-ESM4_ssp245_r1i1p1f1_gr1_20150101-20991231_v20180701.nc: CMIP6 model data produced NOAA-GFDL licensed Creative Commons Attribution-ShareAlike 4.0 International License (https://creativecommons.org/licenses/). Consult (dead link pcmdi dot llnl dot gov/CMIP6/TermsOfUse/) terms use governing CMIP6 output, including citation requirements proper acknowledgment. information data, including limitations, can found via further_info_url (recorded global attribute file). data producers data providers make warranty, either express implied, including, limited , warranties merchantability fitness particular purpose. liabilities arising supply information (including liability arising negligence) excluded fullest extent permitted law. pr_day_MRI-ESM2-0_ssp245_r1i1p1f1_gn_20150101-20991231_v20190603.nc: CMIP6 model data produced MRI licensed Creative Commons Attribution-ShareAlike 4.0 International License (https://creativecommons.org/licenses/). Consult (dead link pcmdi dot llnl dot gov/CMIP6/TermsOfUse/) terms use governing CMIP6 output, including citation requirements proper acknowledgment. information data, including limitations, can found via further_info_url (recorded global attribute file). data producers data providers make warranty, either express implied, including, limited , warranties merchantability fitness particular purpose. liabilities arising supply information (including liability arising negligence) excluded fullest extent permitted law.","code":""},{"path":"https://r-cf.github.io/CFtime/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Patrick Van Laake. Author, maintainer, copyright holder.","code":""},{"path":"https://r-cf.github.io/CFtime/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Van Laake P (2025). CFtime: Using CF-Compliant Calendars Climate Projection Data. R package version 1.7.1, https://github.com/R-CF/CFtime.","code":"@Manual{,   title = {CFtime: Using CF-Compliant Calendars with Climate Projection Data},   author = {Patrick {Van Laake}},   year = {2025},   note = {R package version 1.7.1},   url = {https://github.com/R-CF/CFtime}, }"},{"path":"https://r-cf.github.io/CFtime/index.html","id":"cftime","dir":"","previous_headings":"","what":"Using CF-Compliant Calendars with Climate Projection Data","title":"Using CF-Compliant Calendars with Climate Projection Data","text":"CFtime R package supports working CF Metadata Conventions time coordinates, specifically geared time-referencing data sets climate projections produced World Climate Research Programme re-analysis data ERA5 European Centre Medium-range Weather Forecasts (ECMWF). data sets include metadata epoch, origin, point time points time calculated. epoch takes form days since 1949-12-01, data collection (Coupled Model Intercomparison Project (CMIP) generation, model, etc) epoch. data temporal dimension coordinate variable netCDF file attribute units string value describing epoch. coordinate variable, say “time”, data values 43289, offsets epoch units epoch string (“days” case). convert offset date, using specific calendar, package . Given calendars supported CF Metadata Conventions compatible POSIXt, conversion trivial standard R date-time operations give correct results. important account differences easily demonstrated: ’s difference nearly 21 months! (yes, 30 February valid date 360_day calendar.) defined calendars CF Metadata Conventions supported: standard gregorian: calendar valid Common Era ; starts 0001-01-01 00:00:00, .e. 1 January year 1. Time periods prior introduction Gregorian calendar (1582-10-15) use julian calendar common use . 10-day gap Julian Gregorian calendars observed, dates range 5 14 October 1582 invalid. proleptic_gregorian: calendar uses Gregorian calendar periods prior introduction calendar well, extends periods Common Era, e.g. year 0 negative years. tai: International Atomic Time, global standard linear time based multiple atomic clocks: counts seconds since start 1958-01-01 00:00:00. presentation uses Gregorian calendar. Timestamps prior start allowed. utc: Coordinated Universal Time, standard civil timekeeping world. based International Atomic Time uses occasional leap seconds remain synchronous Earth’s rotation around Sun; end 2024 37 seconds behind tai. uses Gregorian calendar start 1972-01-01 00:00:00; earlier timestamps allowed. Future timestamps also allowed insertion leap seconds unpredictable. computer clocks synchronize UTC calculations periods consider leap seconds. julian: julian calendar leap year every four years, including centennial years. Otherwise standard calendar. 365_day noleap: “model time” calendar leap years occur. Year 0 exists, well years prior . 366_day all_leap: “model time” calendar years leap years. Year 0 exists, well years prior . 360_day: “model time” calendar every year 360 days divided 12 months 30 days . Year 0 exists, well years prior . none: Perpetual “calendar” experiments simulated given instant year. elements calendar thus represent instant time. Use custom calendars currently supported. package facilitates use suite models climate projections use different calendars consistent manner. package particularly useful working climate projection data daily higher resolution, work equally well data lower resolution. Timestamps generated using ISO8601 standard. Calendar-aware factors can generated support processing data using tapply() similar functions. Merging multiple data sets subsetting facilitate analysis preserving computer resources.","code":"library(CFtime)  # POSIXt calculations on a standard calendar as.Date(\"1949-12-01\") + 43289 #> [1] \"2068-06-08\"  # CFtime calculation on a \"360_day\" calendar as_timestamp(CFtime(\"days since 1949-12-01\", \"360_day\", 43289)) #> [1] \"2070-02-30\""},{"path":"https://r-cf.github.io/CFtime/index.html","id":"working-with-cftime","dir":"","previous_headings":"","what":"Working with CFtime","title":"Using CF-Compliant Calendars with Climate Projection Data","text":"Check multiple articles provide detailed instructions examples use package.","code":""},{"path":"https://r-cf.github.io/CFtime/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Using CF-Compliant Calendars with Climate Projection Data","text":"Get latest stable version CRAN: can install development version CFtime GitHub :","code":"install.packages(\"CFtime\") # install.packages(\"devtools\") devtools::install_github(\"R-CF/CFtime\")"},{"path":"https://r-cf.github.io/CFtime/index.html","id":"coverage","dir":"","previous_headings":"","what":"Coverage","title":"Using CF-Compliant Calendars with Climate Projection Data","text":"package tested following data sets: ERA5 (including multiple variables, levels, mixed ERA5/ERA5T data) CMIP5 CORDEX CMIP6 ROMS package also operates geographical /temporal subsets data sets long subsetted data complies CF Metadata Conventions. includes subsetting Climate Data Store. Subsetted data Climate4Impact automatically supported dimension names compliant CF Metadata Conventions, use corresponding dimension names instead.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":null,"dir":"Reference","previous_headings":"","what":"Basic CF calendar — CFCalendar","title":"Basic CF calendar — CFCalendar","text":"class represents basic CF calendar. instantiated directly; instead, use one descendant classes. internal class stores information represent date time values using CF conventions. instance created exported CFTime class, also exposes relevant properties class. following calendars supported: gregorian\\standard, international standard calendar civil use. proleptic_gregorian, standard calendar extending 1582-10-15 Gregorian calendar adopted. tai, International Atomic Time clock dates expressed using Gregorian calendar. utc, Coordinated Universal Time clock dates expressed using Gregorian calendar. julian, every fourth year leap year (including years 1700, 1800, 1900, 2100, etc). noleap\\365_day, years 365 days. all_leap\\366_day, years 366 days. 360_day, years 360 days, divided 12 months 30 days.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Basic CF calendar — CFCalendar","text":"https://cfconventions.org/Data/cf-conventions/cf-conventions-1.12/cf-conventions.html#calendar","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Basic CF calendar — CFCalendar","text":"name Descriptive name calendar, per CF Metadata Conventions. definition string defines units origin, per CF Metadata Conventions. unit numeric id unit calendar. origin data.frame fields origin calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Basic CF calendar — CFCalendar","text":"origin_date (read-) Character string date calendar. origin_time (read-) Character string time calendar. timezone (read-) Character string time zone origin calendar.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Basic CF calendar — CFCalendar","text":"CFCalendar$new() CFCalendar$print() CFCalendar$valid_days() CFCalendar$add_day() CFCalendar$POSIX_compatible() CFCalendar$is_compatible() CFCalendar$is_equivalent() CFCalendar$parse() CFCalendar$offsets2time() CFCalendar$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Basic CF calendar — CFCalendar","text":"Create new CF calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"nm name calendar. must follow CF Metadata Conventions. definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"Basic CF calendar — CFCalendar","text":"Print information calendar console.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$print(...)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"self, invisibly.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"Basic CF calendar — CFCalendar","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"NULL. warning generated effect descendant class used method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-add-day-","dir":"Reference","previous_headings":"","what":"Method add_day()","title":"Basic CF calendar — CFCalendar","text":"Add day supplied dates.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$add_day(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"data.frame like argument ymd day added every row.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-posix-compatible-","dir":"Reference","previous_headings":"","what":"Method POSIX_compatible()","title":"Basic CF calendar — CFCalendar","text":"Indicate time series described using calendar can safely converted standard date-time type (POSIXct, POSIXlt, Date). 'standard' calendar 'proleptic_gregorian' calendar dates time series recent 1582-10-15 (inclusive) can safely converted, method returns FALSE default cover majority cases.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$POSIX_compatible(offsets)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"offsets offsets CFtime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"FALSE default.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-is-compatible-","dir":"Reference","previous_headings":"","what":"Method is_compatible()","title":"Basic CF calendar — CFCalendar","text":"method tests CFCalendar instance argument cal compatible self, meaning class unit. Calendars \"standard\", \"gregorian\" compatible, pairs \"365_day\" \"no_leap\", \"366_day\" \"all_leap\".","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$is_compatible(cal)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"cal Instance descendant CFCalendar class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"TRUE instance argument cal compatible self, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-is-equivalent-","dir":"Reference","previous_headings":"","what":"Method is_equivalent()","title":"Basic CF calendar — CFCalendar","text":"method tests CFCalendar instance argument cal equivalent self, meaning class, unit, equivalent origins. Calendars \"standard\", \"gregorian\" equivalent, pairs \"365_day\" \"no_leap\", \"366_day\" \"all_leap\". Note origins need identical, parsed values . \"2000-01\" parsed \"2000-01-01 00:00:00\", instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$is_equivalent(cal)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"cal Instance descendant CFCalendar class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"TRUE instance argument cal equivalent self, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"Basic CF calendar — CFCalendar","text":"Parsing vector date-time character strings parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$parse(d)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"d character. character vector date-times.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"data.frame columns year, month, day, hour, minute, second, time zone, offset. Invalid input data appear NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-offsets-time-","dir":"Reference","previous_headings":"","what":"Method offsets2time()","title":"Basic CF calendar — CFCalendar","text":"Decompose vector offsets, units calendar, timestamp values. adds specified amount time origin CFTime object. method may introduce inaccuracies calendar unit \"months\" \"years\", due ambiguous definition units.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$offsets2time(offsets = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"offsets Vector numeric offsets add origin calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Basic CF calendar — CFCalendar","text":"data.frame columns timestamp elements many rows offsets.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Basic CF calendar — CFCalendar","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"Basic CF calendar — CFCalendar","text":"","code":"CFCalendar$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"Basic CF calendar — CFCalendar","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":null,"dir":"Reference","previous_headings":"","what":"360-day CF calendar — CFCalendar360","title":"360-day CF calendar — CFCalendar360","text":"class represents CF calendar 360 days per year, evenly divided 12 months 30 days. calendar obviously compatible standard POSIXt calendar. calendar supports dates year 1 includes year 0.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"360-day CF calendar — CFCalendar360","text":"CFtime::CFCalendar -> CFCalendar360","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"360-day CF calendar — CFCalendar360","text":"CFtime::CFCalendar$POSIX_compatible() CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"360-day CF calendar — CFCalendar360","text":"CFCalendar360$new() CFCalendar360$valid_days() CFCalendar360$month_days() CFCalendar360$leap_year() CFCalendar360$date2offset() CFCalendar360$offset2date() CFCalendar360$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"360-day CF calendar — CFCalendar360","text":"Create new CF calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"nm name calendar. must \"360_day\". argument superfluous maintained consistent initialization methods parent sibling classes. definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"360-day CF calendar — CFCalendar360","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"360-day CF calendar — CFCalendar360","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"360-day CF calendar — CFCalendar360","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"Logical vector length argument yr. Since calendar use leap days, values FALSE, NA argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"360-day CF calendar — CFCalendar360","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"Integer vector length equal number rows argument x indicating number days x origin, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"360-day CF calendar — CFCalendar360","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"360-day CF calendar — CFCalendar360","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"360-day CF calendar — CFCalendar360","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"360-day CF calendar — CFCalendar360","text":"","code":"CFCalendar360$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar360.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"360-day CF calendar — CFCalendar360","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":null,"dir":"Reference","previous_headings":"","what":"365-day CF calendar — CFCalendar365","title":"365-day CF calendar — CFCalendar365","text":"class represents CF calendar 365 days per year, leap days year. calendar compatible standard POSIXt calendar. calendar supports dates year 1 includes year 0.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"365-day CF calendar — CFCalendar365","text":"CFtime::CFCalendar -> CFCalendar365","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"365-day CF calendar — CFCalendar365","text":"CFtime::CFCalendar$POSIX_compatible() CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"365-day CF calendar — CFCalendar365","text":"CFCalendar365$new() CFCalendar365$valid_days() CFCalendar365$month_days() CFCalendar365$leap_year() CFCalendar365$date2offset() CFCalendar365$offset2date() CFCalendar365$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"365-day CF calendar — CFCalendar365","text":"Create new CF calendar 365 days per year.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"nm name calendar. must \"365_day\" \"noleap\". definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"365-day CF calendar — CFCalendar365","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"365-day CF calendar — CFCalendar365","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"ymd data.frame, optional, dates parsed parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"365-day CF calendar — CFCalendar365","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"Logical vector length argument yr. Since calendar use leap days, values FALSE, NA argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"365-day CF calendar — CFCalendar365","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"Integer vector length equal number rows argument x indicating number days x origin, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"365-day CF calendar — CFCalendar365","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"365-day CF calendar — CFCalendar365","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"365-day CF calendar — CFCalendar365","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"365-day CF calendar — CFCalendar365","text":"","code":"CFCalendar365$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar365.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"365-day CF calendar — CFCalendar365","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":null,"dir":"Reference","previous_headings":"","what":"366-day CF calendar — CFCalendar366","title":"366-day CF calendar — CFCalendar366","text":"class represents CF calendar 366 days per year, leap days every year. calendar compatible standard POSIXt calendar. calendar supports dates year 1 includes year 0.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"366-day CF calendar — CFCalendar366","text":"CFtime::CFCalendar -> CFCalendar366","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"366-day CF calendar — CFCalendar366","text":"CFtime::CFCalendar$POSIX_compatible() CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"366-day CF calendar — CFCalendar366","text":"CFCalendar366$new() CFCalendar366$valid_days() CFCalendar366$month_days() CFCalendar366$leap_year() CFCalendar366$date2offset() CFCalendar366$offset2date() CFCalendar366$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"366-day CF calendar — CFCalendar366","text":"Create new CF calendar 366 days per year.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"nm name calendar. must \"366_day\" \"all_leap\". definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"366-day CF calendar — CFCalendar366","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"366-day CF calendar — CFCalendar366","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"ymd data.frame, optional, dates parsed parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"366-day CF calendar — CFCalendar366","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"Logical vector length argument yr. Since calendar years leap day, values TRUE, NA argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"366-day CF calendar — CFCalendar366","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"Integer vector length equal number rows argument x indicating number days x origin, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"366-day CF calendar — CFCalendar366","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"366-day CF calendar — CFCalendar366","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"366-day CF calendar — CFCalendar366","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"366-day CF calendar — CFCalendar366","text":"","code":"CFCalendar366$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendar366.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"366-day CF calendar — CFCalendar366","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":null,"dir":"Reference","previous_headings":"","what":"Julian CF calendar — CFCalendarJulian","title":"Julian CF calendar — CFCalendarJulian","text":"class represents Julian calendar 365 days per year, every fourth year leap year 366 days. months year align standard calendar. calendar compatible standard POSIXt calendar. calendar starts 1 January year 1: 0001-01-01 00:00:00. dates generate error.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Julian CF calendar — CFCalendarJulian","text":"CFtime::CFCalendar -> CFCalendarJulian","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Julian CF calendar — CFCalendarJulian","text":"CFtime::CFCalendar$POSIX_compatible() CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Julian CF calendar — CFCalendarJulian","text":"CFCalendarJulian$new() CFCalendarJulian$valid_days() CFCalendarJulian$month_days() CFCalendarJulian$leap_year() CFCalendarJulian$date2offset() CFCalendarJulian$offset2date() CFCalendarJulian$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Julian CF calendar — CFCalendarJulian","text":"Create new CF calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"nm name calendar. must \"julian\". argument superfluous maintained consistent initialization methods parent sibling classes. definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"Julian CF calendar — CFCalendarJulian","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"Julian CF calendar — CFCalendarJulian","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"ymd data.frame, optional, dates parsed parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12, regular year without leap day.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"Julian CF calendar — CFCalendarJulian","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"Logical vector length argument yr. NA returned elements argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"Julian CF calendar — CFCalendarJulian","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"Integer vector length equal number rows argument x indicating number days x origin calendar, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"Julian CF calendar — CFCalendarJulian","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Julian CF calendar — CFCalendarJulian","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Julian CF calendar — CFCalendarJulian","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Julian CF calendar — CFCalendarJulian","text":"","code":"CFCalendarJulian$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarJulian.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Julian CF calendar — CFCalendarJulian","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":null,"dir":"Reference","previous_headings":"","what":"CF calendar with no annual cycle — CFCalendarNone","title":"CF calendar with no annual cycle — CFCalendarNone","text":"class represents CF calendar annual cycle. datetimes calendar . useful repeated experiments simulating fixed time year.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"CF calendar with no annual cycle — CFCalendarNone","text":"CFtime::CFCalendar -> CFCalendarNone","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CF calendar with no annual cycle — CFCalendarNone","text":"CFtime::CFCalendar$POSIX_compatible() CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CF calendar with no annual cycle — CFCalendarNone","text":"CFCalendarNone$new() CFCalendarNone$valid_days() CFCalendarNone$month_days() CFCalendarNone$leap_year() CFCalendarNone$date2offset() CFCalendarNone$offset2date() CFCalendarNone$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Create new CF calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"nm name calendar. must \"none\". argument superfluous maintained consistent initialization methods parent sibling classes. definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Indicate supplied dates valid. calendar one date valid, namely one calendar initialized .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Determine number days month calendar. always returns vector NA values method meaning class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"vector NA values dates supplied argument ymd. dates supplied, vector NA values length 12.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Indicate years leap years. always returns vector NA values method meaning class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Vector length argument yr NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Calculate difference days data.frame time parts origin. difference always 0, given true calendar can calculations determine difference.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Integer vector length equal number rows argument x indicating 0 days equal origin calendar, NA otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"Calculate date parts day differences origin. always returns 0's year, month day values valid calendar. Hour-minute-second datetime parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"CF calendar with no annual cycle — CFCalendarNone","text":"data.frame columns 'year', 'month' 'day' many rows length vector x. Rows values x 0 return values origin calendar nonetheless, accordance CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CF calendar with no annual cycle — CFCalendarNone","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"CF calendar with no annual cycle — CFCalendarNone","text":"","code":"CFCalendarNone$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarNone.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"CF calendar with no annual cycle — CFCalendarNone","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":null,"dir":"Reference","previous_headings":"","what":"Proleptic Gregorian CF calendar — CFCalendarProleptic","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"class represents standard CF calendar, Gregorian calendar extended backwards introduction Gregorian calendar. calendar compatible standard POSIXt calendar, note daylight savings time considered. calendar includes dates 1582-10-14 1582-10-05 (gap Gregorian Julian calendars, observed standard calendar), extends years year 1, including year 0.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"CFtime::CFCalendar -> CFCalendarProleptic","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"CFCalendarProleptic$new() CFCalendarProleptic$valid_days() CFCalendarProleptic$month_days() CFCalendarProleptic$leap_year() CFCalendarProleptic$POSIX_compatible() CFCalendarProleptic$date2offset() CFCalendarProleptic$offset2date() CFCalendarProleptic$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Create new CF calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"nm name calendar. must \"proleptic_gregorian\". argument superfluous maintained consistent initialization methods parent sibling classes. definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"ymd data.frame, optional, dates parsed parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Integer vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12, regular year without leap day.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Logical vector length argument yr. NA returned elements argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-posix-compatible-","dir":"Reference","previous_headings":"","what":"Method POSIX_compatible()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Indicate time series described using calendar can safely converted standard date-time type (POSIXct, POSIXlt, Date).","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$POSIX_compatible(offsets)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"offsets offsets CFtime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"TRUE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Integer vector length equal number rows argument x indicating number days x origin, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"","code":"CFCalendarProleptic$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarProleptic.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Proleptic Gregorian CF calendar — CFCalendarProleptic","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard CF calendar — CFCalendarStandard","title":"Standard CF calendar — CFCalendarStandard","text":"class represents standard calendar 365 366 days per year. calendar compatible standard POSIXt calendar periods introduction Gregorian calendar, 1582-10-15 00:00:00. calendar starts 0001-01-01 00:00:00, e.g. start Common Era. Note calendar, despite name, used ISO8601 many computer systems periods prior introduction Gregorian calendar. Use \"proleptic_gregorian\" calendar recommended periods straddling introduction date, calendar compatible POSIXt OSes.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Standard CF calendar — CFCalendarStandard","text":"CFtime::CFCalendar -> CFCalendarStandard","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Standard CF calendar — CFCalendarStandard","text":"CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Standard CF calendar — CFCalendarStandard","text":"CFCalendarStandard$new() CFCalendarStandard$valid_days() CFCalendarStandard$is_gregorian_date() CFCalendarStandard$POSIX_compatible() CFCalendarStandard$month_days() CFCalendarStandard$leap_year() CFCalendarStandard$date2offset() CFCalendarStandard$offset2date() CFCalendarStandard$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Standard CF calendar — CFCalendarStandard","text":"Create new CF calendar. called deprecated 'gregorian' automatically converted equivalent 'standard'.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"nm name calendar. must \"standard\" \"gregorian\" (deprecated). definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"Standard CF calendar — CFCalendarStandard","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-is-gregorian-date-","dir":"Reference","previous_headings":"","what":"Method is_gregorian_date()","title":"Standard CF calendar — CFCalendarStandard","text":"Indicate supplied dates Gregorian part calendar, e.g. 1582-10-15 .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$is_gregorian_date(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"Logical vector length argument ymd rows TRUE days Gregorian part calendar FALSE otherwise, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-posix-compatible-","dir":"Reference","previous_headings":"","what":"Method POSIX_compatible()","title":"Standard CF calendar — CFCalendarStandard","text":"Indicate time series described using calendar can safely converted standard date-time type (POSIXct, POSIXlt, Date). case offsets timestamps fall start Gregorian calendar, 1582-10-15 00:00:00.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$POSIX_compatible(offsets)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"offsets offsets CFtime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"TRUE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-month-days-","dir":"Reference","previous_headings":"","what":"Method month_days()","title":"Standard CF calendar — CFCalendarStandard","text":"Determine number days month calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$month_days(ymd = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"ymd data.frame, optional, dates parsed parts.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"vector indicating number days month dates supplied argument ymd. dates supplied, number days per month calendar vector length 12, regular year without leap day.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-leap-year-","dir":"Reference","previous_headings":"","what":"Method leap_year()","title":"Standard CF calendar — CFCalendarStandard","text":"Indicate years leap years.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$leap_year(yr)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"yr Integer vector years test.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"Logical vector length argument yr. NA returned elements argument yr NA.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-date-offset-","dir":"Reference","previous_headings":"","what":"Method date2offset()","title":"Standard CF calendar — CFCalendarStandard","text":"Calculate difference days data.frame time parts origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$date2offset(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"x data.frame. Dates calculate difference .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"Integer vector length equal number rows argument x indicating number days x origin calendar, NA rows x NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-offset-date-","dir":"Reference","previous_headings":"","what":"Method offset2date()","title":"Standard CF calendar — CFCalendarStandard","text":"Calculate date parts day differences origin. deals days impacted calendar. Hour-minute-second timestamp parts handled CFCalendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$offset2date(x)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"x Integer vector days add origin.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"Standard CF calendar — CFCalendarStandard","text":"data.frame columns 'year', 'month' 'day' many rows length vector x.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Standard CF calendar — CFCalendarStandard","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard CF calendar — CFCalendarStandard","text":"","code":"CFCalendarStandard$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarStandard.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard CF calendar — CFCalendarStandard","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":null,"dir":"Reference","previous_headings":"","what":"International Atomic Time CF calendar — CFCalendarTAI","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"class represents calendar based International Atomic Time. Validity 1958 onwards, dates represented using Gregorian calendar. Given \"calendar\" based universal clock, concepts leap second, time zone daylight savings time apply.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"CFtime::CFCalendar -> CFtime::CFCalendarProleptic -> CFCalendarTAI","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$offsets2time() CFtime::CFCalendar$parse() CFtime::CFCalendar$print() CFtime::CFCalendarProleptic$POSIX_compatible() CFtime::CFCalendarProleptic$date2offset() CFtime::CFCalendarProleptic$initialize() CFtime::CFCalendarProleptic$leap_year() CFtime::CFCalendarProleptic$month_days() CFtime::CFCalendarProleptic$offset2date()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"CFCalendarTAI$valid_days() CFCalendarTAI$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"","code":"CFCalendarTAI$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"ymd data.frame dates parsed parts columns year, month day. present, tz column checked illegal time zone offsets. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"","code":"CFCalendarTAI$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarTAI.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"International Atomic Time CF calendar — CFCalendarTAI","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":null,"dir":"Reference","previous_headings":"","what":"Coordinated Universal Time CF calendar — CFCalendarUTC","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"class represents calendar based Coordinated Universal Time. Validity 1972 onwards, dates represented using Gregorian calendar, present (future timestamps allowed). Leap seconds considered calculations. Also, time zone information irrelevant may given. general, calendar use unit time second. Minute, hour day allowed discouraged. Month year time unit allowed practical way maintain leap second accuracy.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"CFtime::CFCalendar -> CFtime::CFCalendarProleptic -> CFCalendarUTC","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"CFtime::CFCalendar$add_day() CFtime::CFCalendar$is_compatible() CFtime::CFCalendar$is_equivalent() CFtime::CFCalendar$print() CFtime::CFCalendarProleptic$POSIX_compatible() CFtime::CFCalendarProleptic$date2offset() CFtime::CFCalendarProleptic$leap_year() CFtime::CFCalendarProleptic$month_days() CFtime::CFCalendarProleptic$offset2date()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"CFCalendarUTC$new() CFCalendarUTC$valid_days() CFCalendarUTC$parse() CFCalendarUTC$offsets2time() CFCalendarUTC$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"Create new CF UTC calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"","code":"CFCalendarUTC$new(nm, definition)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"nm name calendar. must \"utc\". definition string defines units origin, per CF Metadata Conventions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"method-valid-days-","dir":"Reference","previous_headings":"","what":"Method valid_days()","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"Indicate supplied dates valid.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"","code":"CFCalendarUTC$valid_days(ymd)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"ymd data.frame dates parsed parts columns year, month day. columns disregarded.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"Logical vector length argument ymd rows TRUE valid days FALSE invalid days, NA row argument ymd NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"method-parse-","dir":"Reference","previous_headings":"","what":"Method parse()","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"Parsing vector date-time character strings parts. includes leap seconds. Time zone indications allowed.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"","code":"CFCalendarUTC$parse(d)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"d character. character vector date-times.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"data.frame columns year, month, day, hour, minute, second, time zone, offset. Invalid input data appear NA. Note time zone always \"+0000\" included maintain compatibility results calendars.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"method-offsets-time-","dir":"Reference","previous_headings":"","what":"Method offsets2time()","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"Decompose vector offsets, units calendar, timestamp values. adds specified amount time origin CFTime object.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"","code":"CFCalendarUTC$offsets2time(offsets = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"offsets Vector numeric offsets add origin calendar.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"data.frame columns timestamp elements many rows offsets.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"","code":"CFCalendarUTC$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFCalendarUTC.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coordinated Universal Time CF calendar — CFCalendarUTC","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":null,"dir":"Reference","previous_headings":"","what":"CFClimatology class — CFClimatology","title":"CFClimatology class — CFClimatology","text":"class represents climatological time coordinate, \"calendar\" \"climatology\" bounds values. \"calendar\" portion managed CFTime class, class inherited. class implements specific behaviour climatological bounds values includes methods query structure climatological data.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CFClimatology class — CFClimatology","text":"https://cfconventions.org/Data/cf-conventions/cf-conventions-1.12/cf-conventions.html#climatological-statistics","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"CFClimatology class — CFClimatology","text":"CFtime::CFTime -> CFClimatology","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"CFClimatology class — CFClimatology","text":"period (read-) Character string indicating period year climatology calculated. years (read-) Vector two integer values indicating years climatology calculated. friendlyClassName Character string class name display purposes.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"CFClimatology class — CFClimatology","text":"CFtime::CFTime$POSIX_compatible() CFtime::CFTime$as_timestamp() CFtime::CFTime$copy() CFtime::CFTime$cut() CFtime::CFTime$equidistant() CFtime::CFTime$factor() CFtime::CFTime$factor_coverage() CFtime::CFTime$factor_units() CFtime::CFTime$format() CFtime::CFTime$get_bounds() CFtime::CFTime$indexOf() CFtime::CFTime$range() CFtime::CFTime$set_bounds() CFtime::CFTime$slice() CFtime::CFTime$subset()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CFClimatology class — CFClimatology","text":"CFClimatology$new() CFClimatology$print() CFClimatology$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CFClimatology class — CFClimatology","text":"Create new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CFClimatology class — CFClimatology","text":"","code":"CFClimatology$new(definition, calendar = \"standard\", offsets, bounds)"},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFClimatology class — CFClimatology","text":"definition Character string units origin calendar. calendar Character string calendar use. Must one values permitted CF Metadata Conventions. NULL, \"standard\" calendar used. offsets Numeric character vector. numeric, vector offsets origin time series. character vector length 2 , timestamps ISO8601 UDUNITS format. bounds climatological bounds offsets. matrix columns offsets low values first row, high values second row. bounds oftentimes overlap discontinuous.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"CFClimatology class — CFClimatology","text":"Print summary CFClimatology object console.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CFClimatology class — CFClimatology","text":"","code":"CFClimatology$print(...)"},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFClimatology class — CFClimatology","text":"... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"CFClimatology class — CFClimatology","text":"self invisibly.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CFClimatology class — CFClimatology","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"CFClimatology class — CFClimatology","text":"","code":"CFClimatology$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFClimatology.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFClimatology class — CFClimatology","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a factor from the offsets in a CFTime instance — CFfactor","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"function factor can generated time series, part thereof, contained CFTime instance. specifically interesting creating factors date part time series aggregate time series longer time periods (month) can used process daily CF data sets using, instance, tapply().","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"","code":"CFfactor(t, period = \"month\", era = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"t instance CFTime class whose offsets used construct factor. period character. character string one values \"year\", \"season\", \"quarter\", \"month\" (default), \"dekad\" \"day\". era numeric list, optional. Vector years construct factor, list whose elements vector years. era specified, factor use entire time series factor.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"era single vector specified, factor length equal number offsets t. era list, list number elements names era, containing factor. Elements factor set NA time series values outside range specified years. factor, factors list, attributes 'period', 'era' 'CFTime'. Attribute 'period' holds value period argument. Attribute 'era' indicates number years included era, -1 era provided. Attribute 'CFTime' holds instance CFTime definition t, offsets corresponding mid-point non-era factor levels; era argument specified, attribute 'CFTime' NULL.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"factor respect calendar time series built . periods longer day result factor calendar longer relevant (calendars impacts days, dekads, months, quarters, seasons years). factor generated order offsets CFTime instance. typical CF-compliant data sources use ordered time series , however, guarantee factor ordered multiple CFTime objects may merged order. processing factor ordering concern. era parameter specified, either vector years include factor, list vectors, factor consider values time series fall within list years, inclusive boundary values. values factor set NA. years need contiguous, within single vector among list items, order. following periods supported function: year, year offset returned \"YYYY\". season, meteorological season offset returned \"Sx\", x 1-4, preceeded \"YYYY\" era specified. Note December dates labeled belonging subsequent year, date \"2020-12-01\" yields \"2021S1\". implies standard CMIP files one full years data first season data first two months (January February), final season single month data (December). quarter, calendar quarter offset returned \"Qx\", x 1-4, preceeded \"YYYY\" era specified. month, month offset returned \"01\" \"12\", preceeded \"YYYY-\" era specified. default period. dekad, ten-day periods returned \"Dxx\", xx runs \"01\" \"36\", preceeded \"YYYY\" era specified. month subdivided dekads follows: 1- days 01 - 10; 2- days 11 - 20; 3- remainder month. day, month day offset returned \"MM-DD\", preceeded \"YYYY-\" era specified. possible create factor period shorter temporal resolution source data set t argument derives. example, source data set monthly data, dekad day factor created. Creating factors periods supported function. Factors based timestamp information dependent calendar can trivially constructed output as_timestamp() function. non-era factors attribute 'CFTime' result contains CFTime instance valid result applying factor data set t argument associated . words, CFTime instance '' describes temporal dimension data set '' factor 'Af' generated like Af <- CFfactor(), Bt <- attr(Af, \"CFTime\") describes temporal dimension result , say, B <- apply(, 1:2, tapply, Af, FUN). 'CFTime' attribute NULL era factors.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a factor from the offsets in a CFTime instance — CFfactor","text":"","code":"t <- CFtime(\"days since 1949-12-01\", \"360_day\", 19830:54029)  # Create a dekad factor for the whole time series f <- CFfactor(t, \"dekad\")  # Create three monthly factors for early, mid and late 21st century eras ep <- CFfactor(t, era = list(early = 2021:2040, mid = 2041:2060, late = 2061:2080))"},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_coverage.html","id":null,"dir":"Reference","previous_headings":"","what":"Coverage of time elements for each factor level — CFfactor_coverage","title":"Coverage of time elements for each factor level — CFfactor_coverage","text":"function calculates number time elements, relative coverage, level factor generated CFfactor().","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_coverage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coverage of time elements for each factor level — CFfactor_coverage","text":"","code":"CFfactor_coverage(t, f, coverage = \"absolute\")"},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_coverage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coverage of time elements for each factor level — CFfactor_coverage","text":"t instance CFTime. f factor list. factor list factors derived parameter t. factor list thereof generally generated function CFfactor(). coverage \"absolute\" \"relative\".","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_coverage.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coverage of time elements for each factor level — CFfactor_coverage","text":"f factor, numeric vector length equal number levels factor, indicating number units time series t contained level factor coverage = \"absolute\" proportion units present relative maximum number coverage = \"relative\". f list factors, list element numeric vector .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_coverage.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coverage of time elements for each factor level — CFfactor_coverage","text":"","code":"t <- CFtime(\"days since 2001-01-01\", \"365_day\", 0:364) f <- CFfactor(t, \"dekad\") CFfactor_coverage(t, f, \"absolute\") #>  [1] 10 10 11 10 10  8 10 10 11 10 10 10 10 10 11 10 10 10 10 10 11 10 10 11 10 #> [26] 10 10 10 10 11 10 10 10 10 10 11"},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":null,"dir":"Reference","previous_headings":"","what":"Number of base time units in each factor level — CFfactor_units","title":"Number of base time units in each factor level — CFfactor_units","text":"Given factor returned CFfactor() CFTime instance factor derived, function return numeric vector number time units level factor.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Number of base time units in each factor level — CFfactor_units","text":"","code":"CFfactor_units(t, f)"},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Number of base time units in each factor level — CFfactor_units","text":"t instance CFTime. f factor list factors derived parameter t. factor list thereof generally generated function CFfactor().","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Number of base time units in each factor level — CFfactor_units","text":"f factor, numeric vector length equal number levels factor, indicating number time units level factor. f list factors, list element numeric vector .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Number of base time units in each factor level — CFfactor_units","text":"result function useful convert absolute relative values. Climate change anomalies, instance, usually computed differencing average values future period baseline period. Going average values back absolute values aggregate period (typical temperature precipitation, among variables) easily done result function, without consider specifics calendar data set. factor f era (e.g. spanning multiple years levels indicate specific year), result indicate number time units period regular single year. words, era 2041-2060 monthly factor standard calendar days unit, result c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31). Leap days thus considered 366_day all_leap calendars. Note function gives number time units level factor - actual number data points cf instance per factor level may different. Use CFfactor_coverage() determine actual number data points coverage data points relative factor level.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFfactor_units.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Number of base time units in each factor level — CFfactor_units","text":"","code":"t <- CFtime(\"days since 2001-01-01\", \"365_day\", 0:364) f <- CFfactor(t, \"dekad\") CFfactor_units(t, f) #>  [1] 10 10 11 10 10  8 10 10 11 10 10 10 10 10 11 10 10 10 10 10 11 10 10 11 10 #> [26] 10 10 10 10 11 10 10 10 10 10 11"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a CFTime object — CFtime-function","title":"Create a CFTime object — CFtime-function","text":"function creates instance CFTime class. arguments call typically read CF-compliant data file climatological observations climate projections. Specification arguments can also made manually variety combinations.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a CFTime object — CFtime-function","text":"","code":"CFtime(definition, calendar = \"standard\", offsets, from, to, by, length.out)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a CFTime object — CFtime-function","text":"definition character string describing time coordinate. calendar character string describing calendar use time dimension definition string. Default value \"standard\". offsets Numeric character vector, optional. numeric, vector offsets origin time series. character vector, timestamps ISO8601 UDUNITS format. , Optional. Character timestamps ISO8601 UDUNITS format. given, sequence timestamps generated starting timestamp. Either argument length.must provided well. Ignored argument offsets NULL. Optional. single character string representing time interval, composed number time unit separated space, \"6 hours\". argument supplied, argument separation successive timestamps. Note time unit string unit definition argument must allowable unit time. Time interval units \"months\" \"years\" strongly discouraged unless time unit used definition argument - cases loss precision due ambiguity time units. length.Optional. numeric value indicates lengths time series generate, rounded fractional. Ignored argument provided.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a CFTime object — CFtime-function","text":"instance CFTime class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a CFTime object — CFtime-function","text":"time series can also constructed like sequence. case argument offsets NULL missing arguments provided, either arguments length.indicating end time series. Arguments named avoid ambiguity.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-function.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a CFTime object — CFtime-function","text":"","code":"# Using numeric offset values - this is how a netCDF file works CFtime(\"days since 1850-01-01\", \"julian\", 0:364) #> CF calendar: #>   Origin  : 1850-01-01T00:00:00 #>   Units   : days #>   Type    : julian #> Time series: #>   Elements: [1850-01-01 .. 1850-12-31] (average of 1.000000 days between 365 elements) #>   Bounds  : not set  # A time object with a single defined timestamp CFtime(\"hours since 2023-01-01\", \"360_day\", \"2023-01-30T23:00\") #> CF calendar: #>   Origin  : 2023-01-01T00:00:00 #>   Units   : hours #>   Type    : 360_day #> Time series: #>   Element : 2023-01-30T23:00:00  #>   Bounds  : not set  # A time series from a sequence with an end point CFtime(\"days since 2023-01-01\", from = \"2020-01-01\", to = \"2023-12-31\", by = \"12 days\") #> CF calendar: #>   Origin  : 2023-01-01T00:00:00 #>   Units   : days #>   Type    : standard #> Time series: #>   Elements: [2020-01-01 .. 2023-12-23] (average of 12.000000 days between 122 elements) #>   Bounds  : not set  # A time series from a sequence with a specified length CFtime(\"days since 2023-01-01\", from = \"2020-01-01T03:00:00\", by = \"6 hr\", length.out = 31 * 4) #> CF calendar: #>   Origin  : 2023-01-01T00:00:00 #>   Units   : days #>   Type    : standard #> Time series: #>   Elements: [2020-01-01T03:00:00 .. 2020-01-31T21:00:00] (average of 0.250000 days between 124 elements) #>   Bounds  : not set"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-package.html","id":null,"dir":"Reference","previous_headings":"","what":"CFtime: working with CF Metadata Conventions ","title":"CFtime: working with CF Metadata Conventions ","text":"Support calendars specified Climate Forecast (CF) Metadata Conventions climate forecasting data. CF Metadata Conventions widely used distributing files climate observations projections, including Coupled Model Intercomparison Project (CMIP) data used climate change scientists Intergovernmental Panel Climate Change (IPCC). package specifically allows user work CF-compliant calendars (many compliant POSIXt). CF time coordinate formally defined CF Metadata Conventions document.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"CFtime: working with CF Metadata Conventions ","text":"package also supports creation \"time\" dimension, using class CFClimatology, climatological statistics defined . package can create CFTime CFClimatology instance scratch , commonly, can use dimension attributes dimension variable values netCDF resource. package actually reading user free use netCDF package preference. recommended package use (netCDF resources) ncdfCF. ncdfCF automatically use package manage \"time\" dimension netCDF resource. package, reads interprets attributes resource apply CF Metadata Conventions, supporting axes, auxiliary coordinate variables, coordinate reference systems, etc. Alternatively, basic netCDF reading writing, two main options RNetCDF ncdf4). Create, modify, inquire CFtime(): Create CFTime instance Properties CFTime instance parse_timestamps(): Parse vector character timestamps CFTime elements Compare two CFTime instances Merge two CFTime instances append additional time steps CFTime instance as_timestamp() format(): Generate vector character POSIXct timestamps CFTime instance range(): Timestamps two endpoints time series copy(): Create copy CFTime instance subset(): Create new CFTime instance subset index positions another CFTime instance is_complete(): CFTime instance complete time series endpoints? month_days(): many days month using calendar CFTime instance? Factors coverage CFfactor() cut(): Create factors different time periods CFfactor_units(): many units time factor level? CFfactor_coverage(): much data available level factor? Filtering selection slice(): Logical vector time steps two extreme points. indexOf(): Index values time series given timestamps, possibly fractional part interpolation.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/CFtime-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"CFtime: working with CF Metadata Conventions ","text":"Maintainer: Patrick Van Laake patrick@vanlaake.net [copyright holder]","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":null,"dir":"Reference","previous_headings":"","what":"CFTime class — CFTime","title":"CFTime class — CFTime","text":"class manages \"time\" dimension netCDF files follow CF Metadata Conventions, productive use R. class field cal holds specific calendar allowed types (named calendars supported). calendar also implemented (hidden) class converts netCDF file encodings timestamps character strings, vice-versa. Bounds information (period time timestamp valid) used defined netCDF file. Additionally, class functions ease use netCDF \"time\" information processing data netCDF files. Filtering indexing time values supported, generation factors.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"CFTime class — CFTime","text":"https://cfconventions.org/Data/cf-conventions/cf-conventions-1.12/cf-conventions.html#time-coordinate","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"CFTime class — CFTime","text":"cal calendar CFTime instance, descendant CFCalendar class. offsets numeric vector offsets origin calendar. resolution average number time units offsets.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"CFTime class — CFTime","text":"calendar (read-) calendar CFTime instance, descendant CFCalendar class. unit (read-) unit string calendar time series. length (read-) Retrieve number offsets time series. bounds Retrieve set bounds offsets. setting, matrix columns offsets low values first row, high values second row. may simply TRUE set regular consecutive bounds. friendlyClassName Character string class name display purposes.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"CFTime class — CFTime","text":"CFTime$new() CFTime$print() CFTime$range() CFTime$as_timestamp() CFTime$format() CFTime$indexOf() CFTime$get_bounds() CFTime$set_bounds() CFTime$equidistant() CFTime$slice() CFTime$POSIX_compatible() CFTime$cut() CFTime$factor() CFTime$factor_units() CFTime$factor_coverage() CFTime$copy() CFTime$subset() CFTime$clone()","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"CFTime class — CFTime","text":"Create new instance class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$new(definition, calendar = \"standard\", offsets = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"definition Character string units origin calendar. calendar Character string calendar use. Must one values permitted CF Metadata Conventions. NULL, \"standard\" calendar used. offsets Numeric character vector, optional. numeric, vector offsets origin time series. character vector length 2 , timestamps ISO8601 UDUNITS format.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-print-","dir":"Reference","previous_headings":"","what":"Method print()","title":"CFTime class — CFTime","text":"Print summary CFTime object console.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$print(...)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"Self, invisibly.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-range-","dir":"Reference","previous_headings":"","what":"Method range()","title":"CFTime class — CFTime","text":"method returns first last timestamp time series vector. Note offsets sorted.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$range(format = \"\", bounds = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"format Value \"date\" \"timestamp\". Optionally, character string specifies alternate format. bounds Logical indicate extremes bounds used, set. Defaults FALSE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"Vector two character strings represent starting ending timestamps time series. format supplied, format used. Otherwise, timestamps time series time component 00:00:00 date timestamp returned, otherwise full timestamp (without time zone information).","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-as-timestamp-","dir":"Reference","previous_headings":"","what":"Method as_timestamp()","title":"CFTime class — CFTime","text":"method generates vector character strings POSIXcts represent date time selectable combination offset. character strings use format YYYY-MM-DDThh:mm:ss±hhmm, depending format specifier. date string necessarily compatible POSIXt - 360_day calendar 2017-02-30 valid 2017-03-31 . \"proleptic_gregorian\" calendar output can also generated vector POSIXct values specifying asPOSIX = TRUE. possible \"standard\" \"gregorian\" calendars timestamps fall 1582-10-15. asPOSIX = TRUE specified calendar support , error generated.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$as_timestamp(format = NULL, asPOSIX = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"format character. character string either values \"date\" \"timestamp\". argument specified, format used \"timestamp\" time information, \"date\" otherwise. asPOSIX logical. TRUE, \"standard\", \"gregorian\" \"proleptic_gregorian\" calendars output vector POSIXct - calendars error thrown. Default value FALSE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"character vector element represents moment time according format specifier.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-format-","dir":"Reference","previous_headings":"","what":"Method format()","title":"CFTime class — CFTime","text":"Format timestamps using specific format string, using specifiers defined base::strptime() function, limitations. supported specifiers bBdeFhHImMpRSTYz%. Modifiers E O silently ignored. specifiers, including percent sign, copied output adorning text. formatting largely oblivious locale. reason certain dates certain calendars POSIX-compliant system functions necessary locale information thus work consistently. main exception (abbreviated) names months (bB), useful pretty printing local language. separators locale-specific adornments, use local knowledge instead depending system locale settings; e.g. specify %m/%d/%Y instead %D. Week information, including weekday names, supported \"week\" defined non-standard CF calendars generally useful climate projection data. working observed data want get pretty week formats, use as_timestamp() method generate POSIXct timestamps (observed data generally uses \"standard\" calendar) use base::format() function supports full set specifiers.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$format(format, usetz = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"format character string strptime format specifiers. omitted, economical format used: full timestamp time information available, date otherwise. usetz Logical. time zone offset appended output? always numerical form, .e. \"-0800\", UTC. Default FALSE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"vector character strings properly formatted timestamp. format specifiers recognized supported returned verbatim.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-indexof-","dir":"Reference","previous_headings":"","what":"Method indexOf()","title":"CFTime class — CFTime","text":"Find index time series timestamp given argument x. Alternatively, x numeric vector index values, return valid indices vector, side effect attribute \"CFTime\" associated result. Matching also returns index values timestamps fall two elements time series - can lead surprising results time series elements positioned middle interval (CF Metadata Conventions instruct us \"reasonably assume\"): time series days January encoded netCDF file c(\"2024-01-01 12:00:00\", \"2024-01-02 12:00:00\", \"2024-01-03 12:00:00\", ...) x <- c(\"2024-01-01\", \"2024-01-02\", \"2024-01-03\") result (NA, 1, 2) ((NA, 1.5, 2.5) method = \"linear\") date values x midnight. situation easily avoided ensuring CFTime instance bounds set (use bounds(y) <- TRUE proximate solution bounds stored netCDF file). bounds set, indices informed bounds. bounds contiguous, returned values may NA even value x falls two valid timestamps. Values x valid timestamps according calendar CFTime instance returned NA. Argument x can also numeric vector index values, case valid values x returned. negative values passed, positive counterparts excluded remainder returned. Positive negative values may mixed. Using numeric vector side effect result attribute \"CFTime\" describing temporal dimension slice. index values outside range self provided, error thrown.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$indexOf(x, method = \"constant\", rightmost.closed = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"x Vector character, POSIXt Date values find indices , numeric vector. method Single value \"constant\" \"linear\". \"constant\", return index value match. \"linear\", return index value fractional value. rightmost.closed Whether include upper limit argument x. Default FALSE. argument ignored argument x contains index values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"numeric vector giving indices self values x. least 1 valid index, attribute \"CFTime\" contains instance CFTime describes dimension filtering dataset associated self result method, excluding NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-get-bounds-","dir":"Reference","previous_headings":"","what":"Method get_bounds()","title":"CFTime class — CFTime","text":"Return boundary values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$get_bounds(format)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"format string specifying format output, optional.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"array dims(2, length(offsets)) values boundaries. NULL boundaries set.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-set-bounds-","dir":"Reference","previous_headings":"","what":"Method set_bounds()","title":"CFTime class — CFTime","text":"Set delete boundary values CFTime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$set_bounds(value)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"value boundary values set, units offsets. matrix (2, length(self$offsets)). NULL, boundaries deleted. TRUE, make regular, consecutive boundaries.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"Self, invisibly.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-equidistant-","dir":"Reference","previous_headings":"","what":"Method equidistant()","title":"CFTime class — CFTime","text":"method returns TRUE time series uniformly distributed time steps extreme values, FALSE otherwise. First test without sorting; work data sets. , offsets sorted. data sets work implied resolutions month, season, year, etc based \"days\" finer calendar unit fail due fact coarser units variable number days per time step, calendars except 360_day. now, approximate solution used work non-conformal exotic arrangements.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$equidistant()"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"TRUE time steps equidistant, FALSE otherwise, NA offsets set.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-slice-","dir":"Reference","previous_headings":"","what":"Method slice()","title":"CFTime class — CFTime","text":"Given vector character timestamps, return logical vector length equal number time steps time series values TRUE time steps fall two extreme values vector values, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$slice(extremes, closed = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"extremes Character vector timestamps represent time period interest. extreme values selected. Badly formatted timestamps silently dropped. closed right side closed, .e. included result? Default FALSE. specification c(\"2022-01-01\", \"2023-01-01) thus include time steps fall year 2022 closed = FALSE include 2023-01-01 exact value present time series.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"logical vector length equal number time steps self values TRUE time steps fall extreme values, FALSE otherwise. attribute 'CFTime' definition self offsets corresponding time steps falling two extremes. values extremes, attribute set.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-posix-compatible-","dir":"Reference","previous_headings":"","what":"Method POSIX_compatible()","title":"CFTime class — CFTime","text":"Can time series converted POSIXt?","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$POSIX_compatible()"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-9","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"TRUE calendar support conversion POSIXt, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-cut-","dir":"Reference","previous_headings":"","what":"Method cut()","title":"CFTime class — CFTime","text":"Create factor CFTime instance. argument breaks one \"year\", \"season\", \"quarter\", \"month\", \"dekad\", \"day\", factor generated like CFfactor(). breaks vector character timestamps factor produced level every interval timestamps. last timestamp, therefore, used close interval started pen-ultimate timestamp - use distant timestamp (e.g. range(x)[2]) ensure offsets end CFTime time series included, desired. last timestamp become upper bound CFTime instance returned attribute function sensible value last timestamp advisable. method works similar base::cut.POSIXt() differences arguments: breaks set options different preceding integer allowed, labels always assigned using values breaks, interval always left-closed.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$cut(breaks)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"breaks character string factor period (see CFfactor() description), character vector timestamps conform calendar x, length least 2. Timestamps must given ISO8601 format, e.g. \"2024-04-10 21:31:43\".","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-10","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"factor levels according breaks argument, attributes 'period', 'era' 'CFTime'. breaks factor period, attribute 'period' value, otherwise '\"day\"'. breaks character vector timestamps, attribute 'CFTime' holds instance CFTime definition x, (ordered) offsets generated breaks. Attribute 'era' always -1.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-factor-","dir":"Reference","previous_headings":"","what":"Method factor()","title":"CFTime class — CFTime","text":"Generate factor offsets, part thereof. specifically interesting creating factors date part time series aggregate time series longer time periods (month) can used process daily CF data sets using, instance, tapply(). factor respect calendar time series built . factor generated order offsets. typical CF-compliant data sources use ordered time series , however, guarantee factor ordered. processing factor ordering concern. era parameter specified, either vector years include factor, list vectors, factor consider values time series fall within list years, inclusive boundary values. values factor set NA. following periods supported method: year, year offset returned \"YYYY\". season, meteorological season offset returned \"Sx\", x 1-4, preceeded \"YYYY\" era specified. Note December dates labeled belonging subsequent year, date \"2020-12-01\" yields \"2021S1\". implies standard CMIP files one full years data first season data first two months (January February), final season single month data (December). quarter, calendar quarter offset returned \"Qx\", x 1-4, preceeded \"YYYY\" era specified. month, month offset returned \"01\" \"12\", preceeded \"YYYY-\" era specified. default period. dekad, ten-day periods returned \"Dxx\", xx runs \"01\" \"36\", preceeded \"YYYY\" era specified. month subdivided dekads follows: 1- days 01 - 10; 2- days 11 - 20; 3- remainder month. day, month day offset returned \"MM-DD\", preceeded \"YYYY-\" era specified. possible create factor period shorter temporal resolution calendar. example, calendar monthly unit, dekad day factor created. Creating factors periods supported method. Factors based timestamp information dependent calendar can trivially constructed output as_timestamp() function. Attribute 'CFTime' result contains CFTime instance valid result applying factor resource instance associated . words, CFTime instance '' describes temporal dimension resource '' factor 'Af' generated Af <- $factor(), Bt <- attr(Af, \"CFTime\") describes temporal dimension result , say, B <- apply(, 1:2, tapply, Af, FUN). 'CFTime' attribute contains CFClimatology instance era factors.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$factor(period = \"month\", era = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"period character. character string one values \"year\", \"season\", \"quarter\", \"month\" (default), \"dekad\" \"day\". era numeric list, optional. Vector years construct factor, list whose elements vector years. extreme values supplied vector used. Note single year specified result valid, climatological statistic. era specified, factor use entire time series factor.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-11","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"era single vector NULL, factor length equal number offsets instance. era list, list number elements names era, containing factor. Elements factor set NA time series values outside range specified years. factor, factors list, attributes 'period', 'era' 'CFTime'. Attribute 'period' holds value period argument. Attribute 'era' indicates number years included era, -1 era provided. Attribute 'CFTime' holds instance CFTime CFClimatology definition instance, offsets corresponding mid-point factor levels.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-factor-units-","dir":"Reference","previous_headings":"","what":"Method factor_units()","title":"CFTime class — CFTime","text":"Given factor produced CFTime$factor(), method return numeric vector number time units level factor. result method useful convert absolute relative values. Climate change anomalies, instance, usually computed differencing average values future period baseline period. Going average values back absolute values aggregate period (typical temperature precipitation, among variables) easily done result method, without consider specifics calendar data set. factor f era (e.g. spanning multiple years levels indicate specific year), result indicate number time units period regular single year. words, era 2041-2060 monthly factor standard calendar days unit, result c(31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31). Leap days thus considered 366_day all_leap calendars. Note function gives number time units level factor - actual number data points time series per factor level may different. Use CFfactor_coverage() determine actual number data points coverage data points relative factor level.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-13","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$factor_units(f)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"f factor list factors derived method CFTime$factor().","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-12","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"f factor, numeric vector length equal number levels factor, indicating number time units level factor. f list factors, list element numeric vector .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-factor-coverage-","dir":"Reference","previous_headings":"","what":"Method factor_coverage()","title":"CFTime class — CFTime","text":"Calculate number time elements, relative coverage, level factor generated CFTime$factor().","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-14","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$factor_coverage(f, coverage = \"absolute\")"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-12","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"f factor list factors derived method CFTime$factor(). coverage \"absolute\" \"relative\".","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-13","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"f factor, numeric vector length equal number levels factor, indicating number units time series contained level factor coverage = \"absolute\" proportion units present relative maximum number coverage = \"relative\". f list factors, list element numeric vector .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-copy-","dir":"Reference","previous_headings":"","what":"Method copy()","title":"CFTime class — CFTime","text":"Create copy current instance. copy completely separate current instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-15","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$copy()"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-14","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"new CFTime instance identical definition set timestamps.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-subset-","dir":"Reference","previous_headings":"","what":"Method subset()","title":"CFTime class — CFTime","text":"Get new CFTime instance subset current instance, including boundary values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-16","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$subset(rng)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-13","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"rng numeric range indices subset instance .","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"returns-15","dir":"Reference","previous_headings":"","what":"Returns","title":"CFTime class — CFTime","text":"new CFTime instance identical definition set timestamps according rng argument.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"CFTime class — CFTime","text":"objects class cloneable method.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"usage-17","dir":"Reference","previous_headings":"","what":"Usage","title":"CFTime class — CFTime","text":"","code":"CFTime$clone(deep = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/CFtime.html","id":"arguments-14","dir":"Reference","previous_headings":"","what":"Arguments","title":"CFTime class — CFTime","text":"deep Whether make deep clone.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as.character.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the timestamps contained in the CFTime instance — as.character.CFTime","title":"Return the timestamps contained in the CFTime instance — as.character.CFTime","text":"Return timestamps contained CFTime instance","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as.character.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the timestamps contained in the CFTime instance — as.character.CFTime","text":"","code":"# S3 method for class 'CFTime' as.character(x, ...)"},{"path":"https://r-cf.github.io/CFtime/reference/as.character.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the timestamps contained in the CFTime instance — as.character.CFTime","text":"x CFTime instance whose timestamps returned. ... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as.character.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the timestamps contained in the CFTime instance — as.character.CFTime","text":"timestamps specified CFTime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as.character.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the timestamps contained in the CFTime instance — as.character.CFTime","text":"","code":"t <- CFtime(\"days since 1850-01-01\", \"julian\", 0:364) as.character(t) #>   [1] \"1850-01-01\" \"1850-01-02\" \"1850-01-03\" \"1850-01-04\" \"1850-01-05\" #>   [6] \"1850-01-06\" \"1850-01-07\" \"1850-01-08\" \"1850-01-09\" \"1850-01-10\" #>  [11] \"1850-01-11\" \"1850-01-12\" \"1850-01-13\" \"1850-01-14\" \"1850-01-15\" #>  [16] \"1850-01-16\" \"1850-01-17\" \"1850-01-18\" \"1850-01-19\" \"1850-01-20\" #>  [21] \"1850-01-21\" \"1850-01-22\" \"1850-01-23\" \"1850-01-24\" \"1850-01-25\" #>  [26] \"1850-01-26\" \"1850-01-27\" \"1850-01-28\" \"1850-01-29\" \"1850-01-30\" #>  [31] \"1850-01-31\" \"1850-02-01\" \"1850-02-02\" \"1850-02-03\" \"1850-02-04\" #>  [36] \"1850-02-05\" \"1850-02-06\" \"1850-02-07\" \"1850-02-08\" \"1850-02-09\" #>  [41] \"1850-02-10\" \"1850-02-11\" \"1850-02-12\" \"1850-02-13\" \"1850-02-14\" #>  [46] \"1850-02-15\" \"1850-02-16\" \"1850-02-17\" \"1850-02-18\" \"1850-02-19\" #>  [51] \"1850-02-20\" \"1850-02-21\" \"1850-02-22\" \"1850-02-23\" \"1850-02-24\" #>  [56] \"1850-02-25\" \"1850-02-26\" \"1850-02-27\" \"1850-02-28\" \"1850-03-01\" #>  [61] \"1850-03-02\" \"1850-03-03\" \"1850-03-04\" \"1850-03-05\" \"1850-03-06\" #>  [66] \"1850-03-07\" \"1850-03-08\" \"1850-03-09\" \"1850-03-10\" \"1850-03-11\" #>  [71] \"1850-03-12\" \"1850-03-13\" \"1850-03-14\" \"1850-03-15\" \"1850-03-16\" #>  [76] \"1850-03-17\" \"1850-03-18\" \"1850-03-19\" \"1850-03-20\" \"1850-03-21\" #>  [81] \"1850-03-22\" \"1850-03-23\" \"1850-03-24\" \"1850-03-25\" \"1850-03-26\" #>  [86] \"1850-03-27\" \"1850-03-28\" \"1850-03-29\" \"1850-03-30\" \"1850-03-31\" #>  [91] \"1850-04-01\" \"1850-04-02\" \"1850-04-03\" \"1850-04-04\" \"1850-04-05\" #>  [96] \"1850-04-06\" \"1850-04-07\" \"1850-04-08\" \"1850-04-09\" \"1850-04-10\" #> [101] \"1850-04-11\" \"1850-04-12\" \"1850-04-13\" \"1850-04-14\" \"1850-04-15\" #> [106] \"1850-04-16\" \"1850-04-17\" \"1850-04-18\" \"1850-04-19\" \"1850-04-20\" #> [111] \"1850-04-21\" \"1850-04-22\" \"1850-04-23\" \"1850-04-24\" \"1850-04-25\" #> [116] \"1850-04-26\" \"1850-04-27\" \"1850-04-28\" \"1850-04-29\" \"1850-04-30\" #> [121] \"1850-05-01\" \"1850-05-02\" \"1850-05-03\" \"1850-05-04\" \"1850-05-05\" #> [126] \"1850-05-06\" \"1850-05-07\" \"1850-05-08\" \"1850-05-09\" \"1850-05-10\" #> [131] \"1850-05-11\" \"1850-05-12\" \"1850-05-13\" \"1850-05-14\" \"1850-05-15\" #> [136] \"1850-05-16\" \"1850-05-17\" \"1850-05-18\" \"1850-05-19\" \"1850-05-20\" #> [141] \"1850-05-21\" \"1850-05-22\" \"1850-05-23\" \"1850-05-24\" \"1850-05-25\" #> [146] \"1850-05-26\" \"1850-05-27\" \"1850-05-28\" \"1850-05-29\" \"1850-05-30\" #> [151] \"1850-05-31\" \"1850-06-01\" \"1850-06-02\" \"1850-06-03\" \"1850-06-04\" #> [156] \"1850-06-05\" \"1850-06-06\" \"1850-06-07\" \"1850-06-08\" \"1850-06-09\" #> [161] \"1850-06-10\" \"1850-06-11\" \"1850-06-12\" \"1850-06-13\" \"1850-06-14\" #> [166] \"1850-06-15\" \"1850-06-16\" \"1850-06-17\" \"1850-06-18\" \"1850-06-19\" #> [171] \"1850-06-20\" \"1850-06-21\" \"1850-06-22\" \"1850-06-23\" \"1850-06-24\" #> [176] \"1850-06-25\" \"1850-06-26\" \"1850-06-27\" \"1850-06-28\" \"1850-06-29\" #> [181] \"1850-06-30\" \"1850-07-01\" \"1850-07-02\" \"1850-07-03\" \"1850-07-04\" #> [186] \"1850-07-05\" \"1850-07-06\" \"1850-07-07\" \"1850-07-08\" \"1850-07-09\" #> [191] \"1850-07-10\" \"1850-07-11\" \"1850-07-12\" \"1850-07-13\" \"1850-07-14\" #> [196] \"1850-07-15\" \"1850-07-16\" \"1850-07-17\" \"1850-07-18\" \"1850-07-19\" #> [201] \"1850-07-20\" \"1850-07-21\" \"1850-07-22\" \"1850-07-23\" \"1850-07-24\" #> [206] \"1850-07-25\" \"1850-07-26\" \"1850-07-27\" \"1850-07-28\" \"1850-07-29\" #> [211] \"1850-07-30\" \"1850-07-31\" \"1850-08-01\" \"1850-08-02\" \"1850-08-03\" #> [216] \"1850-08-04\" \"1850-08-05\" \"1850-08-06\" \"1850-08-07\" \"1850-08-08\" #> [221] \"1850-08-09\" \"1850-08-10\" \"1850-08-11\" \"1850-08-12\" \"1850-08-13\" #> [226] \"1850-08-14\" \"1850-08-15\" \"1850-08-16\" \"1850-08-17\" \"1850-08-18\" #> [231] \"1850-08-19\" \"1850-08-20\" \"1850-08-21\" \"1850-08-22\" \"1850-08-23\" #> [236] \"1850-08-24\" \"1850-08-25\" \"1850-08-26\" \"1850-08-27\" \"1850-08-28\" #> [241] \"1850-08-29\" \"1850-08-30\" \"1850-08-31\" \"1850-09-01\" \"1850-09-02\" #> [246] \"1850-09-03\" \"1850-09-04\" \"1850-09-05\" \"1850-09-06\" \"1850-09-07\" #> [251] \"1850-09-08\" \"1850-09-09\" \"1850-09-10\" \"1850-09-11\" \"1850-09-12\" #> [256] \"1850-09-13\" \"1850-09-14\" \"1850-09-15\" \"1850-09-16\" \"1850-09-17\" #> [261] \"1850-09-18\" \"1850-09-19\" \"1850-09-20\" \"1850-09-21\" \"1850-09-22\" #> [266] \"1850-09-23\" \"1850-09-24\" \"1850-09-25\" \"1850-09-26\" \"1850-09-27\" #> [271] \"1850-09-28\" \"1850-09-29\" \"1850-09-30\" \"1850-10-01\" \"1850-10-02\" #> [276] \"1850-10-03\" \"1850-10-04\" \"1850-10-05\" \"1850-10-06\" \"1850-10-07\" #> [281] \"1850-10-08\" \"1850-10-09\" \"1850-10-10\" \"1850-10-11\" \"1850-10-12\" #> [286] \"1850-10-13\" \"1850-10-14\" \"1850-10-15\" \"1850-10-16\" \"1850-10-17\" #> [291] \"1850-10-18\" \"1850-10-19\" \"1850-10-20\" \"1850-10-21\" \"1850-10-22\" #> [296] \"1850-10-23\" \"1850-10-24\" \"1850-10-25\" \"1850-10-26\" \"1850-10-27\" #> [301] \"1850-10-28\" \"1850-10-29\" \"1850-10-30\" \"1850-10-31\" \"1850-11-01\" #> [306] \"1850-11-02\" \"1850-11-03\" \"1850-11-04\" \"1850-11-05\" \"1850-11-06\" #> [311] \"1850-11-07\" \"1850-11-08\" \"1850-11-09\" \"1850-11-10\" \"1850-11-11\" #> [316] \"1850-11-12\" \"1850-11-13\" \"1850-11-14\" \"1850-11-15\" \"1850-11-16\" #> [321] \"1850-11-17\" \"1850-11-18\" \"1850-11-19\" \"1850-11-20\" \"1850-11-21\" #> [326] \"1850-11-22\" \"1850-11-23\" \"1850-11-24\" \"1850-11-25\" \"1850-11-26\" #> [331] \"1850-11-27\" \"1850-11-28\" \"1850-11-29\" \"1850-11-30\" \"1850-12-01\" #> [336] \"1850-12-02\" \"1850-12-03\" \"1850-12-04\" \"1850-12-05\" \"1850-12-06\" #> [341] \"1850-12-07\" \"1850-12-08\" \"1850-12-09\" \"1850-12-10\" \"1850-12-11\" #> [346] \"1850-12-12\" \"1850-12-13\" \"1850-12-14\" \"1850-12-15\" \"1850-12-16\" #> [351] \"1850-12-17\" \"1850-12-18\" \"1850-12-19\" \"1850-12-20\" \"1850-12-21\" #> [356] \"1850-12-22\" \"1850-12-23\" \"1850-12-24\" \"1850-12-25\" \"1850-12-26\" #> [361] \"1850-12-27\" \"1850-12-28\" \"1850-12-29\" \"1850-12-30\" \"1850-12-31\""},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a vector that represents CF timestamps — as_timestamp","title":"Create a vector that represents CF timestamps — as_timestamp","text":"function generates vector character strings POSIXcts represent date time selectable combination offset.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a vector that represents CF timestamps — as_timestamp","text":"","code":"as_timestamp(t, format = NULL, asPOSIX = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a vector that represents CF timestamps — as_timestamp","text":"t CFTime instance contains offsets use. format character. character string either values \"date\" \"timestamp\". argument specified, format used \"timestamp\" time information, \"date\" otherwise. asPOSIX logical. TRUE, \"standard\", \"gregorian\" \"proleptic_gregorian\" calendars output vector POSIXct - calendars error thrown. Default value FALSE.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a vector that represents CF timestamps — as_timestamp","text":"character vector element represents moment time according format specifier.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a vector that represents CF timestamps — as_timestamp","text":"character strings use format YYYY-MM-DDThh:mm:ss±hhmm, depending format specifier. date string necessarily compatible POSIXt - 360_day calendar 2017-02-30 valid 2017-03-31 . \"proleptic_gregorian\" calendar output can also generated vector POSIXct values specifying asPOSIX = TRUE. possible \"standard\" \"gregorian\" calendars timestamps fall 1582-10-15.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/as_timestamp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a vector that represents CF timestamps — as_timestamp","text":"","code":"t <- CFtime(\"hours since 2020-01-01\", \"standard\", seq(0, 24, by = 0.25)) as_timestamp(t, \"timestamp\") #>  [1] \"2020-01-01T00:00:00\" \"2020-01-01T00:15:00\" \"2020-01-01T00:30:00\" #>  [4] \"2020-01-01T00:45:00\" \"2020-01-01T01:00:00\" \"2020-01-01T01:15:00\" #>  [7] \"2020-01-01T01:30:00\" \"2020-01-01T01:45:00\" \"2020-01-01T02:00:00\" #> [10] \"2020-01-01T02:15:00\" \"2020-01-01T02:30:00\" \"2020-01-01T02:45:00\" #> [13] \"2020-01-01T03:00:00\" \"2020-01-01T03:15:00\" \"2020-01-01T03:30:00\" #> [16] \"2020-01-01T03:45:00\" \"2020-01-01T04:00:00\" \"2020-01-01T04:15:00\" #> [19] \"2020-01-01T04:30:00\" \"2020-01-01T04:45:00\" \"2020-01-01T05:00:00\" #> [22] \"2020-01-01T05:15:00\" \"2020-01-01T05:30:00\" \"2020-01-01T05:45:00\" #> [25] \"2020-01-01T06:00:00\" \"2020-01-01T06:15:00\" \"2020-01-01T06:30:00\" #> [28] \"2020-01-01T06:45:00\" \"2020-01-01T07:00:00\" \"2020-01-01T07:15:00\" #> [31] \"2020-01-01T07:30:00\" \"2020-01-01T07:45:00\" \"2020-01-01T08:00:00\" #> [34] \"2020-01-01T08:15:00\" \"2020-01-01T08:30:00\" \"2020-01-01T08:45:00\" #> [37] \"2020-01-01T09:00:00\" \"2020-01-01T09:15:00\" \"2020-01-01T09:30:00\" #> [40] \"2020-01-01T09:45:00\" \"2020-01-01T10:00:00\" \"2020-01-01T10:15:00\" #> [43] \"2020-01-01T10:30:00\" \"2020-01-01T10:45:00\" \"2020-01-01T11:00:00\" #> [46] \"2020-01-01T11:15:00\" \"2020-01-01T11:30:00\" \"2020-01-01T11:45:00\" #> [49] \"2020-01-01T12:00:00\" \"2020-01-01T12:15:00\" \"2020-01-01T12:30:00\" #> [52] \"2020-01-01T12:45:00\" \"2020-01-01T13:00:00\" \"2020-01-01T13:15:00\" #> [55] \"2020-01-01T13:30:00\" \"2020-01-01T13:45:00\" \"2020-01-01T14:00:00\" #> [58] \"2020-01-01T14:15:00\" \"2020-01-01T14:30:00\" \"2020-01-01T14:45:00\" #> [61] \"2020-01-01T15:00:00\" \"2020-01-01T15:15:00\" \"2020-01-01T15:30:00\" #> [64] \"2020-01-01T15:45:00\" \"2020-01-01T16:00:00\" \"2020-01-01T16:15:00\" #> [67] \"2020-01-01T16:30:00\" \"2020-01-01T16:45:00\" \"2020-01-01T17:00:00\" #> [70] \"2020-01-01T17:15:00\" \"2020-01-01T17:30:00\" \"2020-01-01T17:45:00\" #> [73] \"2020-01-01T18:00:00\" \"2020-01-01T18:15:00\" \"2020-01-01T18:30:00\" #> [76] \"2020-01-01T18:45:00\" \"2020-01-01T19:00:00\" \"2020-01-01T19:15:00\" #> [79] \"2020-01-01T19:30:00\" \"2020-01-01T19:45:00\" \"2020-01-01T20:00:00\" #> [82] \"2020-01-01T20:15:00\" \"2020-01-01T20:30:00\" \"2020-01-01T20:45:00\" #> [85] \"2020-01-01T21:00:00\" \"2020-01-01T21:15:00\" \"2020-01-01T21:30:00\" #> [88] \"2020-01-01T21:45:00\" \"2020-01-01T22:00:00\" \"2020-01-01T22:15:00\" #> [91] \"2020-01-01T22:30:00\" \"2020-01-01T22:45:00\" \"2020-01-01T23:00:00\" #> [94] \"2020-01-01T23:15:00\" \"2020-01-01T23:30:00\" \"2020-01-01T23:45:00\" #> [97] \"2020-01-02T00:00:00\"  t2 <- CFtime(\"days since 2002-01-21\", \"standard\", 0:20) tail(as_timestamp(t2, asPOSIX = TRUE)) #> [1] \"2002-02-05 GMT\" \"2002-02-06 GMT\" \"2002-02-07 GMT\" \"2002-02-08 GMT\" #> [5] \"2002-02-09 GMT\" \"2002-02-10 GMT\"  tail(as_timestamp(t2)) #> [1] \"2002-02-05\" \"2002-02-06\" \"2002-02-07\" \"2002-02-08\" \"2002-02-09\" #> [6] \"2002-02-10\"  tail(as_timestamp(t2 + 1.5)) #> Warning: Offsets not monotonically increasing. #> [1] \"2002-02-06T00:00:00\" \"2002-02-07T00:00:00\" \"2002-02-08T00:00:00\" #> [4] \"2002-02-09T00:00:00\" \"2002-02-10T00:00:00\" \"2002-01-22T12:00:00\""},{"path":"https://r-cf.github.io/CFtime/reference/bounds.html","id":null,"dir":"Reference","previous_headings":"","what":"Bounds of the time offsets — bounds","title":"Bounds of the time offsets — bounds","text":"CF-compliant netCDF files store time information single offset value step along dimension, typically centered valid interval data (e.g. 12-noon day data). Optionally, lower upper values valid interval stored -called \"bounds\" variable, array two rows (lower higher value) column offset. function bounds()<- bounds can set CFTime instance. bounds can retrieved bounds() function.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/bounds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bounds of the time offsets — bounds","text":"","code":"bounds(x, format)  bounds(x) <- value"},{"path":"https://r-cf.github.io/CFtime/reference/bounds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bounds of the time offsets — bounds","text":"x CFTime instance. format Optional. single string format specifiers, see format() details. value matrix (array) dimensions (2, length(offsets)) giving lower (first row) higher (second row) bounds offset (format CF Metadata Conventions uses storage netCDF files). Use NULL unset previously set bounds.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/bounds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bounds of the time offsets — bounds","text":"bounds set, array bounds values dimensions (2, length(offsets)). first row gives lower bound, second row upper bound, column representing offset x. format argument specified, bounds values returned strings according format. NULL bounds set.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/bounds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bounds of the time offsets — bounds","text":"","code":"t <- CFtime(\"days since 2024-01-01\", \"standard\", seq(0.5, by = 1, length.out = 366)) as_timestamp(t)[1:3] #> [1] \"2024-01-01T12:00:00\" \"2024-01-02T12:00:00\" \"2024-01-03T12:00:00\" bounds(t) <- rbind(0:365, 1:366) bounds(t)[, 1:3] #>      [,1] [,2] [,3] #> [1,]    0    1    2 #> [2,]    1    2    3 bounds(t, \"%d-%b-%Y\")[, 1:3] #>      [,1]          [,2]          [,3]          #> [1,] \"01-Jan-2024\" \"02-Jan-2024\" \"03-Jan-2024\" #> [2,] \"02-Jan-2024\" \"03-Jan-2024\" \"04-Jan-2024\""},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a factor for a CFTime instance — cut.CFTime","title":"Create a factor for a CFTime instance — cut.CFTime","text":"Method base::cut() applied CFTime objects.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a factor for a CFTime instance — cut.CFTime","text":"","code":"# S3 method for class 'CFTime' cut(x, breaks, ...)"},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a factor for a CFTime instance — cut.CFTime","text":"x instance CFTime. breaks character string factor period (see CFfactor() description), character vector timestamps conform calendar x, length least 2. Timestamps must given ISO8601 format, e.g. \"2024-04-10 21:31:43\". ... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a factor for a CFTime instance — cut.CFTime","text":"factor levels according breaks argument, attributes 'period', 'era' 'CFTime'. breaks factor period, attribute 'period' value, otherwise '\"day\"'. breaks character vector timestamps, attribute 'CFTime' holds instance CFTime definition x, (ordered) offsets generated breaks. Attribute 'era' always -1.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a factor for a CFTime instance — cut.CFTime","text":"breaks one \"year\", \"season\", \"quarter\", \"month\", \"dekad\", \"day\" factor generated like CFfactor(). breaks vector character timestamps factor produced level every interval timestamps. last timestamp, therefore, used close interval started pen-ultimate timestamp - use distant timestamp (e.g. range(x)[2]) ensure offsets end CFTime time series included, desired. last timestamp become upper bound CFTime instance returned attribute function sensible value last timestamp advisable. method works similar base::cut.POSIXt() differences arguments: breaks set options different preceding integer allowed, labels always assigned using values breaks, interval always left-closed.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/cut.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a factor for a CFTime instance — cut.CFTime","text":"","code":"x <- CFtime(\"days since 2021-01-01\", \"365_day\", 0:729) breaks <- c(\"2022-02-01\", \"2021-12-01\", \"2023-01-01\") cut(x, breaks) #>   [1] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>   [7] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [13] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [19] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [25] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [31] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [37] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [43] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [49] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [55] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [61] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [67] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [73] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [79] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [85] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [91] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #>  [97] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [103] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [109] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [115] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [121] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [127] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [133] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [139] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [145] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [151] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [157] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [163] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [169] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [175] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [181] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [187] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [193] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [199] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [205] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [211] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [217] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [223] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [229] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [235] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [241] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [247] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [253] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [259] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [265] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [271] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [277] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [283] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [289] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [295] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [301] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [307] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [313] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [319] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [325] <NA>       <NA>       <NA>       <NA>       <NA>       <NA>       #> [331] <NA>       <NA>       <NA>       <NA>       2021-12-01 2021-12-01 #> [337] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [343] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [349] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [355] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [361] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [367] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [373] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [379] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [385] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [391] 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 2021-12-01 #> [397] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [403] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [409] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [415] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [421] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [427] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [433] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [439] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [445] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [451] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [457] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [463] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [469] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [475] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [481] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [487] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [493] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [499] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [505] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [511] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [517] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [523] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [529] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [535] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [541] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [547] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [553] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [559] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [565] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [571] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [577] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [583] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [589] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [595] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [601] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [607] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [613] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [619] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [625] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [631] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [637] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [643] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [649] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [655] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [661] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [667] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [673] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [679] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [685] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [691] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [697] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [703] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [709] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [715] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [721] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> [727] 2022-02-01 2022-02-01 2022-02-01 2022-02-01 #> attr(,\"period\") #> [1] day #> attr(,\"era\") #> [1] -1 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2021-01-01T00:00:00 #>   Units   : days #>   Type    : 365_day #> Time series: #>   Elements: [2022-01-01 .. 2022-07-18] (average of 198.000000 days between 2 elements) #>   Bounds  : set #> Levels: 2021-12-01 2022-02-01"},{"path":"https://r-cf.github.io/CFtime/reference/deprecated_functions.html","id":null,"dir":"Reference","previous_headings":"","what":"Deprecated functions — deprecated_functions","title":"Deprecated functions — deprecated_functions","text":"functions deprecated longer used new code. table gives replacement function use instead. function arguments replacement function deprecated function arguments given table. functions permanently deleted can longer called:","code":""},{"path":"https://r-cf.github.io/CFtime/reference/deprecated_functions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Deprecated functions — deprecated_functions","text":"","code":"slab(x, extremes, rightmost.closed = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/deprecated_functions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Deprecated functions — deprecated_functions","text":"x, extremes, rightmost.closed See replacement functions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/deprecated_functions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Deprecated functions — deprecated_functions","text":"See replacement functions.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/equals-.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Equivalence of CFTime objects — ==.CFTime","title":"Equivalence of CFTime objects — ==.CFTime","text":"operator can used test two CFTime objects represent CF-convention time coordinates. Two CFTime objects considered equivalent equivalent calendar offsets.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/equals-.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Equivalence of CFTime objects — ==.CFTime","text":"","code":"# S3 method for class 'CFTime' e1 == e2"},{"path":"https://r-cf.github.io/CFtime/reference/equals-.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Equivalence of CFTime objects — ==.CFTime","text":"e1, e2 Instances CFTime class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/equals-.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Equivalence of CFTime objects — ==.CFTime","text":"TRUE CFTime objects equivalent, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/equals-.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Equivalence of CFTime objects — ==.CFTime","text":"","code":"e1 <- CFtime(\"days since 1850-01-01\", \"gregorian\", 0:364) e2 <- CFtime(\"days since 1850-01-01 00:00:00\", \"standard\", 0:364) e1 == e2 #> [1] TRUE"},{"path":"https://r-cf.github.io/CFtime/reference/format.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Format the timestamps in the CFTime instance — format.CFTime","title":"Format the timestamps in the CFTime instance — format.CFTime","text":"formatting largely oblivious locale. reason certain dates certain calendars POSIX-compliant system functions necessary locale information thus work consistently. main exception (abbreviated) names months (bB), useful pretty printing local language. separators locale-specific adornments, use local knowledge instead depending system locale settings; e.g. specify %m/%d/%Y instead %D.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/format.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Format the timestamps in the CFTime instance — format.CFTime","text":"","code":"# S3 method for class 'CFTime' format(x, format = \"\", tz = \"\", usetz = FALSE, ...)"},{"path":"https://r-cf.github.io/CFtime/reference/format.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Format the timestamps in the CFTime instance — format.CFTime","text":"x CFTime instance whose timestamps formatted. format character string. default format methods \"%Y-%m-%dT%H:%M:%S\" timestamp time component midnight, \"%Y-%m-%d\" otherwise. supported specifiers bBdeFhHImMpRSTYz%. Modifiers E O silently ignored. specifiers, including percent sign, copied output adorning text. tz Ignored. usetz Logical. time zone offset appended output? always numerical form, .e. \"-0800\", UTC. ... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/format.CFTime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Format the timestamps in the CFTime instance — format.CFTime","text":"Week information, including weekday names, supported \"week\" defined non-standard CF calendars generally useful climate projection data. working observed data want get pretty week formats, use as_timestamp() method generate POSIXct timestamps (observed data generally uses \"standard\" calendar) use base::format() function supports full set specifiers.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the index of timestamps in the time series — indexOf","title":"Find the index of timestamps in the time series — indexOf","text":"Find index time series timestamp given argument x. Values x earliest value latest value y returned NA. Alternatively, x numeric vector index values, return valid indices vector, side effect attribute \"CFTime\" associated result.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the index of timestamps in the time series — indexOf","text":"","code":"indexOf(x, y, method = \"constant\", rightmost.closed = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the index of timestamps in the time series — indexOf","text":"x Vector character, POSIXt Date values find indices , numeric vector. y CFTime instance. method Single value \"constant\" \"linear\". \"constant\" bounds set argument y, return index value match. \"linear\", return index value fractional value. rightmost.closed Whether include upper limit argument x. Default FALSE. argument ignored argument x contains index values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the index of timestamps in the time series — indexOf","text":"numeric vector giving indices y values x. least 1 valid index, attribute \"CFTime\" contains instance CFTime describes dimension filtering dataset associated y result method, excluding NA values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Find the index of timestamps in the time series — indexOf","text":"Timestamps can provided vectors character strings, POSIXct Date. Matching also returns index values timestamps fall two elements time series - can lead surprising results time series elements positioned middle interval (CF Metadata Conventions instruct us \"reasonably assume\"): time series days January encoded netCDF file c(\"2024-01-01 12:00:00\", \"2024-01-02 12:00:00\", \"2024-01-03 12:00:00\", ...) x <- c(\"2024-01-01\", \"2024-01-02\", \"2024-01-03\") result (NA, 1, 2) ((NA, 1.5, 2.5) method = \"linear\") date values x midnight. situation easily avoided ensuring y bounds set (use bounds(y) <- TRUE proximate solution bounds stored netCDF file). See Examples. bounds set, indices informed bounds. bounds contiguous, returned values may NA even value x falls two valid timestamps. Values x valid timestamps according calendar y returned NA. x can also numeric vector index values, case valid values x returned. negative values passed, positive counterparts excluded remainder returned. Positive negative values may mixed. Using numeric vector side effect result attribute \"CFTime\" describing temporal dimension slice. index values outside range y (1:length(y)) provided, error thrown.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/indexOf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the index of timestamps in the time series — indexOf","text":"","code":"cf <- CFtime(\"days since 2020-01-01\", \"360_day\", 1440:1799 + 0.5) as_timestamp(cf)[1:3] #> [1] \"2024-01-01T12:00:00\" \"2024-01-02T12:00:00\" \"2024-01-03T12:00:00\" x <- c(\"2024-01-01\", \"2024-01-02\", \"2024-01-03\") indexOf(x, cf) #> [1] NA  1  2 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2024-01-02 .. 2024-01-03] (average of 1.000000 days between 2 elements) #>   Bounds  : not set indexOf(x, cf, method = \"linear\") #> [1]  NA 1.5 2.5 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2024-01-02 .. 2024-01-03] (average of 1.000000 days between 2 elements) #>   Bounds  : not set  bounds(cf) <- TRUE indexOf(x, cf) #> [1] 1 2 3 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2024-01-01 .. 2024-01-03] (average of 1.000000 days between 3 elements) #>   Bounds  : set  # Non-existent calendar day in a `360_day` calendar x <- c(\"2024-03-30\", \"2024-03-31\", \"2024-04-01\") indexOf(x, cf) #> [1] 90 NA 91 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2024-03-30 .. 2024-04-01] (average of 1.000000 days between 2 elements) #>   Bounds  : set  # Numeric x indexOf(c(29, 30, 31), cf) #> [1] 29 30 31 #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2020-01-01T00:00:00 #>   Units   : days #>   Type    : 360_day #> Time series: #>   Elements: [2024-01-29T12:00:00 .. 2024-02-01T12:00:00] (average of 1.000000 days between 3 elements) #>   Bounds  : set"},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":null,"dir":"Reference","previous_headings":"","what":"Indicates if the time series is complete — is_complete","title":"Indicates if the time series is complete — is_complete","text":"function indicates time series complete, meaning time steps equally spaced thus gaps time series.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Indicates if the time series is complete — is_complete","text":"","code":"is_complete(x)"},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Indicates if the time series is complete — is_complete","text":"x instance CFTime class.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Indicates if the time series is complete — is_complete","text":"logical. TRUE time series complete, gaps; FALSE otherwise. offsets added CFTime instance, NA returned.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Indicates if the time series is complete — is_complete","text":"function gives exact results time series nominal unit separation observations time series exact terms calendar unit. example, calendar unit \"days\" observations spaced fixed number days apart result exact, calendar unit used data monthly basis, assessment approximate number days per month variable dependent calendar (exception 360_day calendar, assessment exact). result still correct cases (including CF-compliant data sets developers seen) although may esoteric constructions CFTime offsets trip implementation.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/is_complete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Indicates if the time series is complete — is_complete","text":"","code":"t <- CFtime(\"days since 1850-01-01\", \"julian\", 0:364) is_complete(t) #> [1] TRUE"},{"path":"https://r-cf.github.io/CFtime/reference/length.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"The length of the offsets contained in the CFTime instance. — length.CFTime","title":"The length of the offsets contained in the CFTime instance. — length.CFTime","text":"length offsets contained CFTime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/length.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The length of the offsets contained in the CFTime instance. — length.CFTime","text":"","code":"# S3 method for class 'CFTime' length(x)"},{"path":"https://r-cf.github.io/CFtime/reference/length.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The length of the offsets contained in the CFTime instance. — length.CFTime","text":"x CFTime instance whose length returned","code":""},{"path":"https://r-cf.github.io/CFtime/reference/length.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The length of the offsets contained in the CFTime instance. — length.CFTime","text":"number offsets specified CFTime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/length.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The length of the offsets contained in the CFTime instance. — length.CFTime","text":"","code":"t <- CFtime(\"days since 1850-01-01\", \"julian\", 0:364) length(t) #> [1] 365"},{"path":"https://r-cf.github.io/CFtime/reference/month_days.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the number of days in a month given a certain CF calendar — month_days","title":"Return the number of days in a month given a certain CF calendar — month_days","text":"Given vector dates strings ISO 8601 UDUNITS format CFTime object, function return vector length dates, indicating number days month according calendar specification. vector days supplied, function return integer vector length 12 number days month calendar (disregarding leap day standard julian calendars).","code":""},{"path":"https://r-cf.github.io/CFtime/reference/month_days.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the number of days in a month given a certain CF calendar — month_days","text":"","code":"month_days(t, x = NULL)"},{"path":"https://r-cf.github.io/CFtime/reference/month_days.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the number of days in a month given a certain CF calendar — month_days","text":"t CFTime instance use. x character. optional vector dates strings format YYYY-MM-DD. time part silently ingested.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/month_days.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the number of days in a month given a certain CF calendar — month_days","text":"vector indicating number days month vector dates supplied argument x. Invalidly specified dates result NA value. dates supplied, number days per month calendar vector length 12.","code":""},{"path":[]},{"path":"https://r-cf.github.io/CFtime/reference/month_days.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return the number of days in a month given a certain CF calendar — month_days","text":"","code":"dates <- c(\"2021-11-27\", \"2021-12-10\", \"2022-01-14\", \"2022-02-18\") t <- CFtime(\"days since 1850-01-01\", \"standard\") month_days(t, dates) #> [1] 30 31 31 28  t <- CFtime(\"days since 1850-01-01\", \"360_day\") month_days(t, dates) #> [1] 30 30 30 30  t <- CFtime(\"days since 1850-01-01\", \"all_leap\") month_days(t, dates) #> [1] 30 31 31 29  month_days(t) #>  [1] 31 29 31 30 31 30 31 31 30 31 30 31"},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":null,"dir":"Reference","previous_headings":"","what":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"function parse vector timestamps ISO8601 UDUNITS format data frame columns elements timestamp: year, month, day, hour, minute, second, time zone. timestamps parsed represent invalid date indicated CFtime instance NA values elements offending timestamp (generate warning).","code":""},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"","code":"parse_timestamps(t, x)"},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"t instance CFTime use parsing date. x Vector character strings representing timestamps ISO8601 extended UDUNITS broken format.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"data.frame constituent elements parsed timestamps numeric format. columns year, month, day, hour, minute, second (optional fraction), time zone (character string), corresponding offset value origin. Invalid input data appear NA - case, warning message displayed - missing information input use default values.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"supported formats broken timestamp format UDUNITS library ISO8601 extended, minor changes, suggested CF Metadata Conventions. general, format YYYY-MM-DD hh:mm:ss.sss hh:mm. year can 1 4 digits interpreted literally, 79-10-24 day Mount Vesuvius erupted destroyed Pompeii, 1979-10-24. year month mandatory, fields optional. defaults missing values, following UDUNITS CF Metadata Conventions. Leading zeros can omitted UDUNITS format, ISO8601 format. optional fractional part can many digits precision calls applied smallest specified time unit. result function, fraction associated minute hour, converted regular hh:mm:ss.sss format, .e. fraction result always associated second, rounded milli-second accuracy. separator date time can single whitespace character T. time zone optional least hour Z present, minute optional. time zone hour can optional sign. UDUNITS format separator time time zone must single whitespace character, ISO8601 separation time timezone. Time zone names supported (neither UDUNITS ISO8601 support ) cause parsing fail supplied, one exception: designator \"UTC\" silently dropped (.e. interpreted \"00:00\"). Currently extended formats (separators elements) supported. vector timestamps may combination ISO8601 UDUNITS formats.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/parse_timestamps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parse series of timestamps in CF format to date-time elements — parse_timestamps","text":"","code":"t <- CFtime(\"days since 0001-01-01\", \"proleptic_gregorian\")  # This will have `NA`s on output and generate a warning timestamps <- c(\"2012-01-01T12:21:34Z\", \"12-1-23\", \"today\",                 \"2022-08-16T11:07:34.45-10\", \"2022-08-16 10.5+04\") parse_timestamps(t, timestamps) #> Warning: Some dates could not be parsed. Result contains `NA` values. #> Warning: Timestamps have multiple time zones. Some or all may be different from the calendar time zone. #>   year month day hour minute second    tz   offset #> 1 2012     1   1   12     21  34.00 +0000 734502.5 #> 2   12     1  23    0      0   0.00 +0000   4039.0 #> 3   NA    NA  NA   NA     NA     NA  <NA>       NA #> 4 2022     8  16   11      7  34.45 -1000 738382.5 #> 5 2022     8  16   10     30   0.00 +0400 738382.4"},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Extend a CFTime object — +.CFTime","title":"Extend a CFTime object — +.CFTime","text":"CFTime instance can extended operator, using values another CFTime instance, vector numeric offsets character timestamps. values come another CFTime instance, calendars two instances must compatible calendars CFTime instances compatible, error thrown.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extend a CFTime object — +.CFTime","text":"","code":"# S3 method for class 'CFTime' e1 + e2"},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extend a CFTime object — +.CFTime","text":"e1 Instance CFTime class. e2 Instance CFTime class calendar compatible argument e1, numeric vector offsets origin argument e1, vector character timestamps ISO8601 UDUNITS format.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extend a CFTime object — +.CFTime","text":"CFTime object offsets argument e1 extended values argument e2.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extend a CFTime object — +.CFTime","text":"resulting CFTime instance offsets original CFTime instance, appended offsets argument e2 order specified. new sequence offsets monotonically increasing warning generated (COARDS metadata convention requires offsets monotonically increasing). reordering removal duplicates. time series usually associated data set correspondence data files CFTime instance thus preserved. merging data sets described time series, order must identical merging . Note adding multiple vectors offsets CFTime instance, efficient first concatenate vectors final addition CFTime instance. avoid CFtime(definition, calendar, e1) + CFtime(definition, calendar, e2) + CFtime(definition, calendar, e3) + ... rather CFtime(definition, calendar) + c(e1, e2, e3, ...). responsibility operator ensure offsets different data sets reference calendar. Note also RNetCDF ncdf4 packages return values \"time\" dimension 1-dimensional array. dim(time_values) <- NULL de-class array vector adding offsets existing CFtime instance. bounds set removed. Use bounds() retrieve bounds individual CFTime instances set merging two instances.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/plus-.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extend a CFTime object — +.CFTime","text":"","code":"e1 <- CFtime(\"days since 1850-01-01\", \"gregorian\", 0:364) e2 <- CFtime(\"days since 1850-01-01 00:00:00\", \"standard\", 365:729) e1 + e2 #> CF calendar: #>   Origin  : 1850-01-01T00:00:00 #>   Units   : days #>   Type    : standard #> Time series: #>   Elements: [1850-01-01 .. 1851-12-31] (average of 1.000000 days between 730 elements) #>   Bounds  : not set"},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":null,"dir":"Reference","previous_headings":"","what":"Properties of a CFTime object — definition","title":"Properties of a CFTime object — definition","text":"functions return properties instance CFTime class. properties read-, offsets can added using + operator.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Properties of a CFTime object — definition","text":"","code":"definition(t)  calendar(t)  unit(t)  origin(t)  timezone(t)  offsets(t)  resolution(t)"},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Properties of a CFTime object — definition","text":"t instance CFTime.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Properties of a CFTime object — definition","text":"calendar() unit() return character string. origin() returns data frame timestamp elements single row data. timezone() returns calendar time zone character string. offsets() returns vector offsets NULL offsets set.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":"functions","dir":"Reference","previous_headings":"","what":"Functions","title":"Properties of a CFTime object — definition","text":"definition(): definition string CFTime instance. calendar(): calendar CFTime instance. unit(): unit CFTime instance. origin(): origin CFTime instance timestamp elements. timezone(): time zone calendar CFTime instance character string. offsets(): offsets CFTime instance numeric vector. resolution(): average separation offsets CFTime instance.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/properties.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Properties of a CFTime object — definition","text":"","code":"t <- CFtime(\"days since 1850-01-01\", \"julian\", 0:364) definition(t) #> [1] \"days since 1850-01-01\" calendar(t) #> [1] \"julian\" unit(t) #> [1] \"days\" timezone(t) #> [1] \"+0000\" origin(t) #>   year month day hour minute second    tz offset #> 1 1850     1   1    0      0      0 +0000      0 offsets(t) #>   [1]   0   1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17 #>  [19]  18  19  20  21  22  23  24  25  26  27  28  29  30  31  32  33  34  35 #>  [37]  36  37  38  39  40  41  42  43  44  45  46  47  48  49  50  51  52  53 #>  [55]  54  55  56  57  58  59  60  61  62  63  64  65  66  67  68  69  70  71 #>  [73]  72  73  74  75  76  77  78  79  80  81  82  83  84  85  86  87  88  89 #>  [91]  90  91  92  93  94  95  96  97  98  99 100 101 102 103 104 105 106 107 #> [109] 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 #> [127] 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 #> [145] 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 #> [163] 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 #> [181] 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 #> [199] 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 #> [217] 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 #> [235] 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 #> [253] 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 #> [271] 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 #> [289] 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 #> [307] 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 #> [325] 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 #> [343] 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 #> [361] 360 361 362 363 364 resolution(t) #> [1] 1"},{"path":"https://r-cf.github.io/CFtime/reference/range.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Extreme time series values — range.CFTime","title":"Extreme time series values — range.CFTime","text":"Character representation extreme values time series.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/range.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extreme time series values — range.CFTime","text":"","code":"# S3 method for class 'CFTime' range(x, format = \"\", bounds = FALSE, ..., na.rm = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/range.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extreme time series values — range.CFTime","text":"x instance CFTime class. format character string format specifiers, optional. missing empty string, economical ISO8601 format chosen: \"date\" time information present x, \"timestamp\" otherwise. Otherwise suitable format specifier can provided. bounds Logical indicate extremes bounds used, set. Defaults FALSE. ... Ignored. na.rm Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/range.CFTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extreme time series values — range.CFTime","text":"Vector two character representations extremes time series.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/range.CFTime.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extreme time series values — range.CFTime","text":"","code":"cf <- CFtime(\"days since 1850-01-01\", \"julian\", 0:364) range(cf) #> [1] \"1850-01-01\" \"1850-12-31\" range(cf, \"%Y-%b-%e\") #> [1] \"1850-Jan- 1\" \"1850-Dec-31\""},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":null,"dir":"Reference","previous_headings":"","what":"Which time steps fall within extreme values — slice","title":"Which time steps fall within extreme values — slice","text":"Given vector character timestamps, return logical vector length equal number time steps time series values TRUE time steps fall two extreme values vector values, FALSE otherwise.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Which time steps fall within extreme values — slice","text":"","code":"slice(x, extremes, rightmost.closed = FALSE)"},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Which time steps fall within extreme values — slice","text":"x CFTime instance operate . extremes Character vector timestamps represent time period interest. extreme values selected. Badly formatted timestamps silently dropped. rightmost.closed right side closed, .e. included result? Default FALSE. specification c(\"2022-01-01\", \"2023-01-01) thus include time steps fall year 2022 closed = FALSE include 2023-01-01 exact value present time series.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Which time steps fall within extreme values — slice","text":"logical vector length equal number time steps x values TRUE time steps fall extreme values, FALSE otherwise. attribute 'CFTime' definition x offsets corresponding time steps falling two extremes. values extremes, attribute NULL.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Which time steps fall within extreme values — slice","text":"bounds set preserved.","code":""},{"path":"https://r-cf.github.io/CFtime/reference/slice.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Which time steps fall within extreme values — slice","text":"","code":"t <- CFtime(\"hours since 2023-01-01 00:00:00\", \"standard\", 0:23) slice(t, c(\"2022-12-01\", \"2023-01-01 03:00\")) #>  [1]  TRUE  TRUE  TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> [13] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE #> attr(,\"CFTime\") #> CF calendar: #>   Origin  : 2023-01-01T00:00:00 #>   Units   : hours #>   Type    : standard #> Time series: #>   Elements: [2023-01-01T00:00:00 .. 2023-01-01T02:00:00] (average of 1.000000 hours between 3 elements) #>   Bounds  : not set"},{"path":"https://r-cf.github.io/CFtime/reference/str.CFTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Compact display of a CFTime instance — str.CFTime","title":"Compact display of a CFTime instance — str.CFTime","text":"Compact display CFTime instance","code":""},{"path":"https://r-cf.github.io/CFtime/reference/str.CFTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compact display of a CFTime instance — str.CFTime","text":"","code":"# S3 method for class 'CFTime' str(object, ...)"},{"path":"https://r-cf.github.io/CFtime/reference/str.CFTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compact display of a CFTime instance — str.CFTime","text":"object CFTime instance. ... Ignored.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-171","dir":"Changelog","previous_headings":"","what":"CFtime 1.7.1","title":"CFtime 1.7.1","text":"Maintenance release Added length field class CFTime. Added format.CFTime() S3 method. Documentation moved vignettes website github.io.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-170","dir":"Changelog","previous_headings":"","what":"CFtime 1.7.0","title":"CFtime 1.7.0","text":"CRAN release: 2025-08-23 CFtime now hosted Github R-CF organization: things related CF Metadata Conventions R. New sequence-like method create CFTime instances. New methods CFTime$copy() CFTime$subset() create copies entire CFTime instance subset thereof, including boundary values set. Fixed error year 0 timestamps.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-162","dir":"Changelog","previous_headings":"","what":"CFtime 1.6.2","title":"CFtime 1.6.2","text":"CRAN release: 2025-05-18 CFTime$indexOf() method new rightmost.closed argument default value FALSE. Invalid return values always NA, also values outside range. Boundary values fully considered boundary values contiguous, results may NA values x fall within bounds coordinate. Fixed CFTime attribute “season” factor last factor level first season year.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-161","dir":"Changelog","previous_headings":"","what":"CFtime 1.6.1","title":"CFtime 1.6.1","text":"CRAN release: 2025-04-12 Deprecated “gregorian” calendar automatically converted equivalent “standard”. CFCalendar$add_day() method added add day data.frame date parts, using calendar logic. API change: Bounds now always fully specified logical arguments longer used, except setting regular, consecutive bounds (bounds <- TRUE). bounds set, NULL value returned. ensure factorizing “approximate” time units (month) give correct results bounds. (Old API deprecated November 2025, removed early 2026.)","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-160","dir":"Changelog","previous_headings":"","what":"CFtime 1.6.0","title":"CFtime 1.6.0","text":"CRAN release: 2025-03-28 New class CFClimatology manage climatological statistics. Method CFTime$factor() era argument now CFClimatology instance attached attribute “CFTime” return value. New class CFCalendarNone calendar annual cycle. calendar represents single instant time, may useful experiments fixed moment year. str() CFTime CFClimatology gives compact information. Fixed new CFTime instance factor “day” “dekad” period last factor level end year. CFTime$new() single character string offset generate single corresponding offset. Test coverage near-complete. Fixed inconsistent documentation functions. Minor code fixes.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-151","dir":"Changelog","previous_headings":"","what":"CFtime 1.5.1","title":"CFtime 1.5.1","text":"CRAN release: 2025-03-03 CFTime$slice() can now work single multiple timestamp values. Test coverage increased. Documentation updated, runnable example code uses ncdfCF package. Minor code fixes.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-150","dir":"Changelog","previous_headings":"","what":"CFtime 1.5.0","title":"CFtime 1.5.0","text":"CRAN release: 2025-01-15 Code updated align CF 1.12 release. Specifically, calendars utc tai added. standard calendar now uses mixed Gregorian/Julian calendar defined CF Metadata Conventions. proleptic_gregorian now separate calendar code base. Negative offsets calendar origin allowed. Code refactored R6. R6 class CFTime replaces S4 class CFtime (note difference case). S4 class CFdatum replaced hierarchy R6 CFCalendar classes, various non-exported functions converted methods CFCalendar. code now much cleaner easier extend, two new calendars utc tai. ISO8601 timestamps can use comma “,” decimal mark separate fractional part time element, addition dot “.”. drop degenerate dimension bounds 1 offset included subsetting.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-141","dir":"Changelog","previous_headings":"","what":"CFtime 1.4.1","title":"CFtime 1.4.1","text":"CRAN release: 2024-09-15 Method slab() additional argument rightmost.closed indicate upper extreme value included result. Fixed bounds information CFtime instances returned methods indexOf() slab(). Several minor code improvements.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-140","dir":"Changelog","previous_headings":"","what":"CFtime 1.4.0","title":"CFtime 1.4.0","text":"CRAN release: 2024-06-05 Bounds define intervals around offsets can associated CFtime instance retrieved raw offset values formatted timestamps. Methods subset CF time series (e.g. CFfactor(), cut(), slab()) now attribute “CFtime” (among possible others) describes “time” dimension analysis result applying subset. words, CFtime instance ‘Acf’ describes temporal dimension data set ‘’ factor ‘Af’ generated ‘Acf’, Bcf <- attr(Af, \"CFtime\") describes temporal dimension result , say, B <- apply(, 1:2, tapply, Af, FUN). New indexOf() method added returns indices supplied timestamps CFtime instance, optionally fractional part. can used extract specific time steps, interpolate time steps using fractional part, time dimension data set associated CFtime instance. vector indices (e.g. referring slices data set) can also supplied, case valid indices returned, new CFtime instance. New cut() method added generate factor, similar cut.POSIXt() differences arguments. CFfactor() now supports period “quarter”, calendar quarters. format() method added generates character vector timestamps offsets CFtime instance. format specified using flags used strptime(), limitations. particular, locale-specific formatting limited month names weekday information can generated. range() method new “format” parameter support functionality timestamps can also generated extremes bounds, set. as_character() length() methods added return vector timestamps number offsets CFtime instance, respectively. Several functions renamed (notably CFtimestamp() as_timestamp(), CFcomplete() is_complete(), CFrange() standard generic method range(), CFsubset() slab()) consistent R universe. original functions now flagged deprecated. datum functions (deep regular mortals dwell) deleted. Time zone designator “UTC” accepted parsing timestamps offsets. Minor code fixes, see GitHub commits. Documentation updated, description new functions.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-130","dir":"Changelog","previous_headings":"","what":"CFtime 1.3.0","title":"CFtime 1.3.0","text":"CRAN release: 2024-02-28 Two CFtime instances can added compatible calendars units. earlier origin preserved result offsets later instance incremented appropriate amount. , result offsets order specified CFtime instances. new function CFsubset() can used retrieve logical vector indicates time steps CFtime instance fall two timestamps. useful slice data reading file analysis. Time zone information managed level datum. vector character timestamps parsed found different time zones, warning generated. Much reduced memory footprint. Minor code fixes, see GitHub commits. Codecov.io test coverage monitoring added. Documentation updated, description new functions.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-120","dir":"Changelog","previous_headings":"","what":"CFtime 1.2.0","title":"CFtime 1.2.0","text":"CRAN release: 2023-11-02 Datum units “years” “months” added. units discouraged CF Metadata Conventions due problematic definition, quite data sets use units nonetheless. reason, reading existing files datum units supported (converting offsets time elements easy) parsing timestamps (calculating offsets time elements possible tedious slow). definite need, open issue GitHub make good case functionality required. CFresolution() returns average separation elements time series, units datum. CFcomplete() indicates time series complete, meaning gaps time series. also works time series somewhat variable length monthly data “days” datum unit. works exotic time dimension constructions. CFtimestamp() produces timestamp midnight values datum unit “hours”, “minutes” “seconds”. “time” format removed. “standard”, “gregorian” “proleptic_gregorian” calendars output can generated POSIXct specifying new argument asPOSIX = TRUE – defaults FALSE, previous behaviour API broken. Minor documentation updates. Assorted minor code fixes, see GitHub commits.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-110","dir":"Changelog","previous_headings":"","what":"CFtime 1.1.0","title":"CFtime 1.1.0","text":"CRAN release: 2023-10-09 CFtime() can now also invoked vector character timestamps offsets, single timestamp create complete time series datum indicated timestamp. CFtimestamp() can now automatically select best format time series. New CFfactor_units() CFfactor_coverage() functions. CFfactor_units() tell many time units compose every level factor. CFfactor_coverage() computes actual relative number time units factor levels time series CFtime instance factor created. enable assess completeness time series (perhaps filter factor levels certain coverage threshold) can useful computing absolute values average values, often useful computing anomalies. Global constants now defined package environment, CFt. Documentation expanded, updated fixed. Assorted minor code fixes, see GitHub commits.","code":""},{"path":"https://r-cf.github.io/CFtime/news/index.html","id":"cftime-100","dir":"Changelog","previous_headings":"","what":"CFtime 1.0.0","title":"CFtime 1.0.0","text":"CRAN release: 2023-08-11 version supports CF Metadata Conventions calendars use climate projection data. can create timestamps offsets files create factors greatly simplify working climate change data.","code":""}]
